/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1": {
    get: operations["AppController_getHello"];
  };
  "/v1/health": {
    get: operations["AppController_check"];
  };
  "/v1.3/movie": {
    /**
     * Универсальный поиск с фильтрами
     * @description В этом методе вы можете составить запрос на получение фильма любой сложности.
     *
     * Для этого используете значения представленные ниже. Вы можете комбинировать поля, так же указывать множественные и специальные значения полей!
     *
     * Обратите внимание, что этот метод возвращает множество результатов, поэтому по-умолчанию будет возвращены только определенные поля.
     *
     * Чтобы получить нужные вам поля, даже если его нет в ответе по-умолчанию используйте параметр `selectFields`
     */
    get: operations["MovieController_findManyByQueryV1_3"];
  };
  "/v1.3/movie/{id}": {
    /**
     * Поиск по id
     * @description Возвращает всю доступную информацию о сущности.
     */
    get: operations["MovieController_findOneV1_3"];
  };
  "/v1.3/movie/random": {
    /**
     * Получить рандомный тайтл из базы
     * @description Этот метод не принимает ни каких параметров, так как выборка в нем уже достаточно релевантная. В него попадают тайтлы не старше 10 лет, рейтинг которых больше 6, есть название и постер.
     */
    get: operations["MovieController_getRandomMovieV1_3"];
  };
  "/v1.2/movie/search": {
    /**
     * Полнотекстовый поиск
     * @description Этот метод предназначен для полнотекстового поиска тайтлов по текстовому запросу. Он принимает только один параметр `query`. Если вам нужны фильтры, гибкость и множество результатов, используйте метод `Универсальный поиск с фильтрами` (findMany). В этом методе также не доступен выбор полей. А в ответ приходит упрощенная модель, которая подходит только для отображения результатов поиска.
     */
    get: operations["MovieController_searchMovie"];
  };
  "/v1.1/movie/awards": {
    /** Награды тайтлов */
    get: operations["MovieController_findManyAwardsByQuery"];
  };
  "/v1/movie": {
    /**
     * Универсальный поиск с фильтрами
     * @deprecated
     * @description Эта версия эндпоинта устарела. Новый в 1.3 версии.
     */
    get: operations["MovieController_findManyByQuery"];
  };
  "/v1/movie/{id}": {
    /**
     * Поиск по id
     * @deprecated
     * @description Эта версия эндпоинта устарела. Новый в 1.3 версии.
     */
    get: operations["MovieController_findOne"];
  };
  "/v1/movie/random": {
    /**
     * Получить рандомный тайтл из базы
     * @description Этот метод не принимает ни каких параметров, так как выборка в нем уже достаточно релевантная. В него попадают тайтлы не старше 10 лет, рейтинг которых больше 6, есть название и постер.
     */
    get: operations["MovieController_getRandomMovie"];
  };
  "/v1/movie/possible-values-by-field": {
    /**
     * Получить все возможные значения полей
     * @description Этот метод принимает только определенные поля, и возвращает по ним все доступные значения.
     */
    get: operations["MovieController_getPossibleValuesByFieldName"];
  };
  "/v1/season": {
    /** Поиск сезонов */
    get: operations["SeasonController_findManyByQuery"];
  };
  "/v1/review": {
    /** Поиск отзывов */
    get: operations["ReviewController_findManyByQuery"];
  };
  "/v1.2/person/search": {
    /**
     * Полнотекстовый поиск
     * @description Этот метод предназначен для полнотекстового поиска персон по текстовому запросу. Он принимает только один параметр `query`. Если вам нужны фильтры, гибкость и множество результатов, используйте метод `Универсальный поиск с фильтрами` (findMany). В этом методе также не доступен выбор полей. А в ответ приходит упрощенная модель, которая подходит только для отображения результатов поиска.
     */
    get: operations["PersonController_searchPerson"];
  };
  "/v1.1/person/awards": {
    /** Награды актеров */
    get: operations["PersonController_findManyAwardsByQuery"];
  };
  "/v1/person": {
    /** Универсальный поиск персон с фильтрами */
    get: operations["PersonController_findManyByQuery"];
  };
  "/v1/person/{id}": {
    /**
     * Поиск по id
     * @description Возвращает всю доступную информацию о сущности.
     */
    get: operations["PersonController_findOne"];
  };
  "/v1/studio": {
    /** Поиск студий */
    get: operations["StudioController_findManyByQuery"];
  };
  "/v1/studio/{id}": {
    /**
     * Поиск по id
     * @description Возвращает всю доступную информацию о сущности.
     */
    get: operations["StudioController_findOne"];
  };
  "/v1/keyword": {
    /** Поиск по ключевым словам */
    get: operations["KeywordController_findManyByQuery"];
  };
  "/v1/image": {
    /** Поиск изображений */
    get: operations["ImageController_findManyByQuery"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ExternalId: {
      /**
       * @description ID из kinopoisk HD
       * @example 48e8d0acb0f62d8585101798eaeceec5
       */
      kpHD?: string | null;
      /** @example tt0232500 */
      imdb?: string | null;
      /** @example 9799 */
      tmdb?: number | null;
    };
    Name: {
      name?: string;
      language?: string | null;
      type?: string | null;
    };
    Rating: {
      /**
       * @description Рейтинг кинопоиска
       * @example 6.2
       */
      kp?: number | null;
      /**
       * @description Рейтинг IMDB
       * @example 8.4
       */
      imdb?: number | null;
      /**
       * @description Рейтинг TMDB
       * @example 3.2
       */
      tmdb?: number | null;
      /**
       * @description Рейтинг кинокритиков
       * @example 10
       */
      filmCritics?: number | null;
      /**
       * @description Рейтинг кинокритиков из РФ
       * @example 5.1
       */
      russianFilmCritics?: number | null;
      /**
       * @description Рейтинг основанный на ожиданиях пользователей
       * @example 6.1
       */
      await?: number | null;
    };
    Votes: {
      /** @example 60000 */
      kp?: string | null;
      /** @example 50000 */
      imdb?: string | null;
      /** @example 10000 */
      tmdb?: number | null;
      /**
       * @description Количество голосов кинокритиков
       * @example 10000
       */
      filmCritics?: number | null;
      /**
       * @description Количество голосов кинокритиков из РФ
       * @example 4000
       */
      russianFilmCritics?: number | null;
      /**
       * @description Количество ожидающих выхода
       * @example 34000
       */
      await?: number | null;
    };
    Logo: {
      /** @description Чтобы найти фильмы с этим полем, используйте: `!null` */
      url?: string | null;
    };
    ShortImage: {
      /** @description Чтобы найти фильмы с этим полем, используйте: `!null` */
      url?: string | null;
      /** @description Чтобы найти фильмы с этим полем, используйте: `!null` */
      previewUrl?: string | null;
    };
    Video: {
      /**
       * @description Url трейлера
       * @example https://www.youtube.com/embed/ZsJz2TJAPjw
       */
      url?: string | null;
      /** @example Official Trailer */
      name?: string | null;
      /** @example youtube */
      site?: string | null;
      /** @example TRAILER */
      type?: string | null;
      size: number;
    };
    VideoTypes: {
      trailers?: components["schemas"]["Video"][];
      teasers: components["schemas"]["Video"][];
    };
    ItemName: {
      name?: string;
    };
    PersonInMovie: {
      /**
       * @description Id персоны с кинопоиска
       * @example 6317
       */
      id?: number | null;
      /** @example https://st.kp.yandex.net/images/actor_iphone/iphone360_6317.jpg */
      photo?: string | null;
      /** @example Пол Уокер */
      name?: string | null;
      /** @example Paul Walker */
      enName?: string | null;
      description: string;
      profession: string;
      enProfession: string;
    };
    ReviewInfo: {
      count?: number | null;
      positiveCount?: number | null;
      percentage?: string | null;
    };
    SeasonInfo: {
      number?: number | null;
      episodesCount?: number | null;
    };
    CurrencyValue: {
      /**
       * @description Сумма
       * @example 207283
       */
      value?: number | null;
      /**
       * @description Валюта
       * @example €
       */
      currency?: string | null;
    };
    Fees: {
      world?: components["schemas"]["CurrencyValue"];
      russia?: components["schemas"]["CurrencyValue"];
      usa?: components["schemas"]["CurrencyValue"];
    };
    Premiere: {
      /** @example США */
      country?: string | null;
      /**
       * Format: date-time
       * @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
       * @example 2023-02-25T02:44:39.359Z
       */
      world?: string | null;
      /**
       * Format: date-time
       * @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
       * @example 2023-02-25T02:44:39.359Z
       */
      russia?: string | null;
      digital?: string | null;
      /**
       * Format: date-time
       * @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
       * @example 2023-02-25T02:44:39.359Z
       */
      cinema?: string | null;
      bluray: string;
      dvd: string;
    };
    LinkedMovie: {
      id?: number | null;
      name: string;
      enName: string;
      alternativeName: string;
      type?: string;
      poster: components["schemas"]["ShortImage"];
    };
    WatchabilityItem: {
      name?: string | null;
      logo: components["schemas"]["Logo"];
      url: string;
    };
    Watchability: {
      items?: components["schemas"]["WatchabilityItem"][];
    };
    YearRange: {
      /**
       * @description Год начала
       * @example 2022
       */
      start?: number | null;
      /**
       * @description Год окончания
       * @example 2023
       */
      end?: number | null;
    };
    Audience: {
      /**
       * @description Количество просмотров в кино
       * @example 1000
       */
      count: number;
      /**
       * @description Страна в которой проходил показ
       * @example Россия
       */
      country: string;
    };
    FactInMovie: {
      value: string;
      type: string;
      spoiler: boolean;
    };
    Images: {
      postersCount: number;
      backdropsCount: number;
      framesCount: number;
    };
    VendorImage: {
      name?: string | null;
      url?: string | null;
      previewUrl?: string | null;
    };
    MovieDtoV1_3: {
      /**
       * @description Id фильма с кинопоиска
       * @example 666
       */
      id: number;
      externalId: components["schemas"]["ExternalId"];
      /** @example Человек паук */
      name?: string | null;
      /** @example Spider man */
      alternativeName?: string | null;
      /** @example Spider man */
      enName?: string | null;
      names: components["schemas"]["Name"][];
      /**
       * @description Тип тайтла. Доступны: movie | tv-series | cartoon | anime | animated-series | tv-show
       * @example movie
       */
      type: string;
      /**
       * @description Тип тайтла в числовом обозначении. Доступны: 1 (movie) | 2 (tv-series) | 3 (cartoon) | 4 (anime) | 5 (animated-series) | 6 (tv-show)
       * @example 1
       */
      typeNumber: number;
      /**
       * @description Год премьеры. При поиске по этому полю, можно использовать интервалы 1860-2030
       * @example 2023
       */
      year?: number | null;
      /** @description Описание тайтла */
      description?: string | null;
      /** @description Сокращенное описание */
      shortDescription?: string | null;
      /** @description Слоган */
      slogan?: string | null;
      /**
       * @description Статус релиза тайтла. Доступные значения: filming | pre-production | completed | announced | post-production
       * @example completed
       */
      status?: string | null;
      rating?: components["schemas"]["Rating"];
      votes?: components["schemas"]["Votes"];
      /**
       * @description Продолжительность фильма
       * @example 120
       */
      movieLength?: number | null;
      /**
       * @description Возрастной рейтинг по MPAA
       * @example pg13
       */
      ratingMpaa?: string | null;
      /**
       * @description Возрастной рейтинг
       * @example 16
       */
      ageRating?: number | null;
      logo?: components["schemas"]["Logo"];
      poster?: components["schemas"]["ShortImage"];
      backdrop?: components["schemas"]["ShortImage"];
      videos?: components["schemas"]["VideoTypes"];
      genres?: components["schemas"]["ItemName"][];
      countries?: components["schemas"]["ItemName"][];
      persons?: components["schemas"]["PersonInMovie"][];
      reviewInfo?: components["schemas"]["ReviewInfo"];
      seasonsInfo?: components["schemas"]["SeasonInfo"][];
      budget?: components["schemas"]["CurrencyValue"];
      fees?: components["schemas"]["Fees"];
      premiere?: components["schemas"]["Premiere"];
      similarMovies?: components["schemas"]["LinkedMovie"][];
      sequelsAndPrequels?: components["schemas"]["LinkedMovie"][];
      watchability?: components["schemas"]["Watchability"];
      releaseYears?: components["schemas"]["YearRange"][];
      /**
       * @description Позиция тайтла в топ 10. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`
       * @example 1
       */
      top10?: number | null;
      /**
       * @description Позиция тайтла в топ 250. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`
       * @example 200
       */
      top250?: number | null;
      /**
       * @description Признак того, что тайтл находится в прокате
       * @example true
       */
      ticketsOnSale?: boolean | null;
      /**
       * @description Продолжительность всех серий
       * @example 155
       */
      totalSeriesLength?: number | null;
      /**
       * @description Средняя продолжительность серии
       * @example 20
       */
      seriesLength?: number | null;
      /**
       * @description Признак сериала
       * @example true
       */
      isSeries: boolean;
      audience?: components["schemas"]["Audience"][] | null;
      facts: components["schemas"]["FactInMovie"][];
      imagesInfo: components["schemas"]["Images"];
      productionCompanies: components["schemas"]["VendorImage"][];
    };
    MovieDocsResponseDtoV1_3: {
      docs: components["schemas"]["MovieDtoV1_3"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    UnauthorizedErrorResponseDto: {
      /** @example 401 */
      statusCode: number;
      /** @example В запросе не указан токен! */
      message: string;
      /** @example Unauthorized */
      error: string;
    };
    ForbiddenErrorResponseDto: {
      /** @example 403 */
      statusCode: number;
      /** @example Превышен дневной лимит! */
      message: string;
      /** @example Forbidden */
      error: string;
    };
    ErrorResponseDto: {
      statusCode: number;
      message: string;
      error: string;
    };
    MeiliMovieEntity: {
      id: number;
      name: string;
      alternativeName: string;
      enName: string;
      names: string[];
      type: string;
      year: number;
      description: string;
      shortDescription: string;
      logo: string;
      poster: string;
      backdrop: string;
      rating: number;
      votes: number;
      movieLength: number;
      genres: string[];
      countries: string[];
      releaseYears: number[];
    };
    SearchMovieResponseDto: {
      docs: components["schemas"]["MeiliMovieEntity"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    NominationAward: {
      title: string;
      year: number;
    };
    Nomination: {
      award: components["schemas"]["NominationAward"];
      title: string;
    };
    PartialTypeClass: {
      nomination?: components["schemas"]["Nomination"];
      winning?: boolean;
      movieId?: number;
    };
    MovieAwardDocsResponseDto: {
      docs: components["schemas"]["PartialTypeClass"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    MovieDtoV1: {
      /**
       * @description Id фильма с кинопоиска
       * @example 666
       */
      id: number;
      externalId: components["schemas"]["ExternalId"];
      /** @example Человек паук */
      name?: string | null;
      /** @example Spider man */
      alternativeName?: string | null;
      /** @example Spider man */
      enName?: string | null;
      names: components["schemas"]["Name"][];
      /**
       * @description Тип тайтла. Доступны: movie | tv-series | cartoon | anime | animated-series | tv-show
       * @example movie
       */
      type: string;
      /**
       * @description Тип тайтла в числовом обозначении. Доступны: 1 (movie) | 2 (tv-series) | 3 (cartoon) | 4 (anime) | 5 (animated-series) | 6 (tv-show)
       * @example 1
       */
      typeNumber: number;
      /**
       * @description Год премьеры. При поиске по этому полю, можно использовать интервалы 1860-2030
       * @example 2023
       */
      year?: number | null;
      /** @description Описание тайтла */
      description?: string | null;
      /** @description Сокращенное описание */
      shortDescription?: string | null;
      /** @description Слоган */
      slogan?: string | null;
      /**
       * @description Статус релиза тайтла. Доступные значения: filming | pre-production | completed | announced | post-production
       * @example completed
       */
      status?: string | null;
      rating?: components["schemas"]["Rating"];
      votes?: components["schemas"]["Votes"];
      /**
       * @description Продолжительность фильма
       * @example 120
       */
      movieLength?: number | null;
      /**
       * @description Возрастной рейтинг по MPAA
       * @example pg13
       */
      ratingMpaa?: string | null;
      /**
       * @description Возрастной рейтинг
       * @example 16
       */
      ageRating?: number | null;
      logo?: components["schemas"]["Logo"];
      poster?: components["schemas"]["ShortImage"];
      backdrop?: components["schemas"]["ShortImage"];
      videos?: components["schemas"]["VideoTypes"];
      genres?: components["schemas"]["ItemName"][];
      countries?: components["schemas"]["ItemName"][];
      persons?: components["schemas"]["PersonInMovie"][];
      reviewInfo?: components["schemas"]["ReviewInfo"];
      seasonsInfo?: components["schemas"]["SeasonInfo"][];
      budget?: components["schemas"]["CurrencyValue"];
      fees?: components["schemas"]["Fees"];
      premiere?: components["schemas"]["Premiere"];
      similarMovies?: components["schemas"]["LinkedMovie"][];
      sequelsAndPrequels?: components["schemas"]["LinkedMovie"][];
      watchability?: components["schemas"]["Watchability"];
      releaseYears?: components["schemas"]["YearRange"][];
      /**
       * @description Позиция тайтла в топ 10. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`
       * @example 1
       */
      top10?: number | null;
      /**
       * @description Позиция тайтла в топ 250. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`
       * @example 200
       */
      top250?: number | null;
      facts: components["schemas"]["FactInMovie"][];
      imagesInfo: components["schemas"]["Images"];
      productionCompanies: components["schemas"]["VendorImage"][];
    };
    MovieDocsResponseDtoV1: {
      docs: components["schemas"]["MovieDtoV1"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    PossibleValueDto: {
      /** @description Значение по которому нужно делать запрос в базу данных */
      name: string;
      /** @description Вспомогательное значение */
      slug: string;
    };
    Episode: {
      number?: number;
      name?: string;
      enName?: string;
      description?: string;
      date?: string;
    };
    Season: {
      movieId?: number;
      number?: number;
      episodesCount?: number;
      episodes?: components["schemas"]["Episode"][];
    };
    SeasonDocsResponseDto: {
      docs: components["schemas"]["Season"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    Review: {
      id?: number;
      movieId?: number;
      title?: string;
      type?: string;
      review?: string;
      date?: string;
      author?: string;
      authorId?: number;
      userRating: number;
    };
    ReviewDocsResponseDto: {
      docs: components["schemas"]["Review"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    MeiliPersonEntity: {
      id: number;
      name: string;
      enName: string;
      photo: string;
      sex: string;
      growth: number;
      birthday: string;
      death: string;
      age: number;
      birthPlace: string[];
      deathPlace: string[];
      profession: string[];
    };
    SearchPersonResponseDto: {
      docs: components["schemas"]["MeiliPersonEntity"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    Movie: {
      id: number;
      name: string;
      rating: number;
    };
    PersonAward: {
      nomination: components["schemas"]["Nomination"];
      winning: boolean;
      personId: number;
      movie: components["schemas"]["Movie"];
    };
    PersonAwardDocsResponseDto: {
      docs: components["schemas"]["PersonAward"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    BirthPlace: {
      value?: string;
    };
    DeathPlace: {
      value?: string;
    };
    Spouses: {
      id?: number;
      name?: string;
      divorced?: boolean;
      divorcedReason?: string;
      sex?: string;
      children?: number;
      relation?: string;
    };
    Profession: {
      value?: string;
    };
    FactInPerson: {
      value?: string;
    };
    MovieInPerson: {
      id: number;
      name?: string | null;
      alternativeName?: string | null;
      rating?: number | null;
      general?: boolean | null;
      description?: string | null;
      enProfession?: string | null;
    };
    Person: {
      id: number;
      name?: string | null;
      enName?: string | null;
      photo?: string | null;
      sex?: string | null;
      growth?: number | null;
      birthday?: string | null;
      death?: string | null;
      age?: number | null;
      birthPlace?: components["schemas"]["BirthPlace"][];
      deathPlace?: components["schemas"]["DeathPlace"][];
      spouses?: components["schemas"]["Spouses"];
      countAwards?: number;
      profession?: components["schemas"]["Profession"][];
      facts?: components["schemas"]["FactInPerson"][];
      movies?: components["schemas"]["MovieInPerson"][];
    };
    PersonDocsResponseDto: {
      docs: components["schemas"]["Person"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    MovieFromStudio: {
      id?: number;
    };
    Studio: {
      id: string;
      subType: string;
      title: string;
      /** @enum {string} */
      type?: "Производство" | "Спецэффекты" | "Прокат" | "Студия дубляжа";
      movies?: components["schemas"]["MovieFromStudio"];
    };
    StudioDocsResponseDto: {
      docs: components["schemas"]["Studio"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    MovieFromKeyword: {
      id?: number;
    };
    Keyword: {
      id: string;
      title: string;
      movies?: components["schemas"]["MovieFromKeyword"];
    };
    KeywordDocsResponseDto: {
      docs: components["schemas"]["Keyword"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    Image: {
      movieId: number;
      type?: string;
      language?: string;
      url?: string;
      previewUrl?: string;
      height?: number;
      width?: number;
    };
    ImageDocsResponseDto: {
      docs: components["schemas"]["Image"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_getHello: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AppController_check: {
    responses: {
      /** @description The Health Check is successful */
      200: {
        content: {
          "application/json": {
            /** @example ok */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: ({
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            }) | null;
            /** @example {} */
            error?: ({
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            }) | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            };
          };
        };
      };
      /** @description The Health Check is not successful */
      503: {
        content: {
          "application/json": {
            /** @example error */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: ({
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            }) | null;
            /**
             * @example {
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            error?: ({
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            }) | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   },
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            };
          };
        };
      };
    };
  };
  /**
   * Универсальный поиск с фильтрами
   * @description В этом методе вы можете составить запрос на получение фильма любой сложности.
   *
   * Для этого используете значения представленные ниже. Вы можете комбинировать поля, так же указывать множественные и специальные значения полей!
   *
   * Обратите внимание, что этот метод возвращает множество результатов, поэтому по-умолчанию будет возвращены только определенные поля.
   *
   * Чтобы получить нужные вам поля, даже если его нет в ответе по-умолчанию используйте параметр `selectFields`
   */
  MovieController_findManyByQueryV1_3: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Id фильма с кинопоиска. <br/>Тип в базе: `() => Number`<br/>Пример: `666` */
        id?: string[];
        /** @description ID из kinopoisk HD. <br/>Тип в базе: `() => String`<br/>Пример: `48e8d0acb0f62d8585101798eaeceec5` */
        "externalId.kpHD"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `tt0232500` */
        "externalId.imdb"?: string[] | null;
        /** @description Тип в базе: `() => Number`<br/>Пример: `9799` */
        "externalId.tmdb"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Человек паук` */
        name?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Spider man` */
        alternativeName?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Spider man` */
        enName?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "names.name"?: string[];
        /** @description Тип тайтла. Доступны: movie | tv-series | cartoon | anime | animated-series | tv-show. <br/>Тип в базе: `() => String`<br/>Пример: `movie` */
        type?: string[];
        /** @description Тип тайтла в числовом обозначении. Доступны: 1 (movie) | 2 (tv-series) | 3 (cartoon) | 4 (anime) | 5 (animated-series) | 6 (tv-show). <br/>Тип в базе: `() => Number`<br/>Пример: `1` */
        typeNumber?: string[];
        /** @description Год премьеры. При поиске по этому полю, можно использовать интервалы 1860-2030. <br/>Тип в базе: `() => Number`<br/>Пример: `2023` */
        year?: string[] | null;
        /** @description Описание тайтла. <br/>Тип в базе: `() => String` */
        description?: string[] | null;
        /** @description Сокращенное описание. <br/>Тип в базе: `() => String` */
        shortDescription?: string[] | null;
        /** @description Слоган. <br/>Тип в базе: `() => String` */
        slogan?: string[] | null;
        /** @description Статус релиза тайтла. Доступные значения: filming | pre-production | completed | announced | post-production. <br/>Тип в базе: `() => String`<br/>Пример: `completed` */
        status?: string[] | null;
        /** @description Рейтинг кинопоиска. <br/>Тип в базе: `() => Number`<br/>Пример: `6.2` */
        "rating.kp"?: string[] | null;
        /** @description Рейтинг IMDB. <br/>Тип в базе: `() => Number`<br/>Пример: `8.4` */
        "rating.imdb"?: string[] | null;
        /** @description Рейтинг TMDB. <br/>Тип в базе: `() => Number`<br/>Пример: `3.2` */
        "rating.tmdb"?: string[] | null;
        /** @description Рейтинг кинокритиков. <br/>Тип в базе: `() => Number`<br/>Пример: `10` */
        "rating.filmCritics"?: string[] | null;
        /** @description Рейтинг кинокритиков из РФ. <br/>Тип в базе: `() => Number`<br/>Пример: `5.1` */
        "rating.russianFilmCritics"?: string[] | null;
        /** @description Рейтинг основанный на ожиданиях пользователей. <br/>Тип в базе: `() => Number`<br/>Пример: `6.1` */
        "rating.await"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `60000` */
        "votes.kp"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `50000` */
        "votes.imdb"?: string[] | null;
        /** @description Тип в базе: `() => Number`<br/>Пример: `10000` */
        "votes.tmdb"?: string[] | null;
        /** @description Количество голосов кинокритиков. <br/>Тип в базе: `() => Number`<br/>Пример: `10000` */
        "votes.filmCritics"?: string[] | null;
        /** @description Количество голосов кинокритиков из РФ. <br/>Тип в базе: `() => Number`<br/>Пример: `4000` */
        "votes.russianFilmCritics"?: string[] | null;
        /** @description Количество ожидающих выхода. <br/>Тип в базе: `() => Number`<br/>Пример: `34000` */
        "votes.await"?: string[] | null;
        /** @description Продолжительность фильма. <br/>Тип в базе: `() => Number`<br/>Пример: `120` */
        movieLength?: string[] | null;
        /** @description Возрастной рейтинг по MPAA. <br/>Тип в базе: `() => String`<br/>Пример: `pg13` */
        ratingMpaa?: string[] | null;
        /** @description Возрастной рейтинг. <br/>Тип в базе: `() => Number`<br/>Пример: `16` */
        ageRating?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "logo.url"?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "poster.url"?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "poster.previewUrl"?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "backdrop.url"?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "backdrop.previewUrl"?: string[] | null;
        /** @description Url трейлера. <br/>Тип в базе: `() => String`<br/>Пример: `https://www.youtube.com/embed/ZsJz2TJAPjw` */
        "videos.trailers.url"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Official Trailer` */
        "videos.trailers.name"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `youtube` */
        "videos.trailers.site"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `TRAILER` */
        "videos.trailers.type"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "genres.name"?: string[];
        /** @description Тип в базе: `() => String` */
        "countries.name"?: string[];
        /** @description Id персоны с кинопоиска. <br/>Тип в базе: `() => Number`<br/>Пример: `6317` */
        "persons.id"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `https://st.kp.yandex.net/images/actor_iphone/iphone360_6317.jpg` */
        "persons.photo"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Пол Уокер` */
        "persons.name"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Paul Walker` */
        "persons.enName"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "reviewInfo.count"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "reviewInfo.positiveCount"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "reviewInfo.percentage"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "seasonsInfo.number"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "seasonsInfo.episodesCount"?: string[] | null;
        /** @description Сумма. <br/>Тип в базе: `() => Number`<br/>Пример: `207283` */
        "budget.value"?: string[] | null;
        /** @description Валюта. <br/>Тип в базе: `() => String`<br/>Пример: `€` */
        "budget.currency"?: string[] | null;
        /** @description Сумма. <br/>Тип в базе: `() => Number`<br/>Пример: `207283` */
        "fees.world.value"?: string[] | null;
        /** @description Валюта. <br/>Тип в базе: `() => String`<br/>Пример: `€` */
        "fees.world.currency"?: string[] | null;
        /** @description Сумма. <br/>Тип в базе: `() => Number`<br/>Пример: `207283` */
        "fees.russia.value"?: string[] | null;
        /** @description Валюта. <br/>Тип в базе: `() => String`<br/>Пример: `€` */
        "fees.russia.currency"?: string[] | null;
        /** @description Сумма. <br/>Тип в базе: `() => Number`<br/>Пример: `207283` */
        "fees.usa.value"?: string[] | null;
        /** @description Валюта. <br/>Тип в базе: `() => String`<br/>Пример: `€` */
        "fees.usa.currency"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `США` */
        "premiere.country"?: string[] | null;
        /** @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023. <br/>Тип в базе: `function Date() { [native code] }`<br/>Пример: `2023-02-25T02:44:39.359Z` */
        "premiere.world"?: string[] | null;
        /** @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023. <br/>Тип в базе: `function Date() { [native code] }`<br/>Пример: `2023-02-25T02:44:39.359Z` */
        "premiere.russia"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "premiere.digital"?: string[] | null;
        /** @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023. <br/>Тип в базе: `function Date() { [native code] }`<br/>Пример: `2023-02-25T02:44:39.359Z` */
        "premiere.cinema"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "similarMovies.id"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "sequelsAndPrequels.id"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "watchability.items.name"?: string[] | null;
        /** @description Год начала. <br/>Тип в базе: `() => Number`<br/>Пример: `2022` */
        "releaseYears.start"?: string[] | null;
        /** @description Год окончания. <br/>Тип в базе: `() => Number`<br/>Пример: `2023` */
        "releaseYears.end"?: string[] | null;
        /** @description Позиция тайтла в топ 10. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`. <br/>Тип в базе: `() => Number`<br/>Пример: `1` */
        top10?: string[] | null;
        /** @description Позиция тайтла в топ 250. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`. <br/>Тип в базе: `() => Number`<br/>Пример: `200` */
        top250?: string[] | null;
        /** @description Признак того, что тайтл находится в прокате. <br/>Тип в базе: `() => Boolean`<br/>Пример: `true` */
        ticketsOnSale?: string[] | null;
        /** @description Продолжительность всех серий. <br/>Тип в базе: `() => Number`<br/>Пример: `155` */
        totalSeriesLength?: string[] | null;
        /** @description Средняя продолжительность серии. <br/>Тип в базе: `() => Number`<br/>Пример: `20` */
        seriesLength?: string[] | null;
        /** @description Признак сериала. <br/>Тип в базе: `() => Boolean`<br/>Пример: `true` */
        isSeries?: string[];
        /** @description Количество просмотров в кино. <br/>Тип в базе: `() => Number`<br/>Пример: `1000` */
        "audience.count"?: string[];
        /** @description Страна в которой проходил показ. <br/>Тип в базе: `() => String`<br/>Пример: `Россия` */
        "audience.country"?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieDocsResponseDtoV1_3"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Поиск по id
   * @description Возвращает всю доступную информацию о сущности.
   */
  MovieController_findOneV1_3: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieDtoV1_3"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Получить рандомный тайтл из базы
   * @description Этот метод не принимает ни каких параметров, так как выборка в нем уже достаточно релевантная. В него попадают тайтлы не старше 10 лет, рейтинг которых больше 6, есть название и постер.
   */
  MovieController_getRandomMovieV1_3: {
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["MovieDtoV1_3"];
        };
      };
    };
  };
  /**
   * Полнотекстовый поиск
   * @description Этот метод предназначен для полнотекстового поиска тайтлов по текстовому запросу. Он принимает только один параметр `query`. Если вам нужны фильтры, гибкость и множество результатов, используйте метод `Универсальный поиск с фильтрами` (findMany). В этом методе также не доступен выбор полей. А в ответ приходит упрощенная модель, которая подходит только для отображения результатов поиска.
   */
  MovieController_searchMovie: {
    parameters: {
      query: {
        /** @description Страница выборки */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Поисковый запрос */
        query: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SearchMovieResponseDto"];
        };
      };
    };
  };
  /** Награды тайтлов */
  MovieController_findManyAwardsByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Тип в базе: `function String() { [native code] }` */
        "nomination.award.title"?: string[];
        /** @description Тип в базе: `function Number() { [native code] }` */
        "nomination.award.year"?: string[];
        /** @description Тип в базе: `function String() { [native code] }` */
        "nomination.title"?: string[];
        /** @description Тип в базе: `() => Boolean` */
        winning?: string[];
        /** @description Тип в базе: `() => Number` */
        movieId?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieAwardDocsResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Универсальный поиск с фильтрами
   * @deprecated
   * @description Эта версия эндпоинта устарела. Новый в 1.3 версии.
   */
  MovieController_findManyByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Id фильма с кинопоиска. <br/>Тип в базе: `() => Number`<br/>Пример: `666` */
        id?: string[];
        /** @description ID из kinopoisk HD. <br/>Тип в базе: `() => String`<br/>Пример: `48e8d0acb0f62d8585101798eaeceec5` */
        "externalId.kpHD"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `tt0232500` */
        "externalId.imdb"?: string[] | null;
        /** @description Тип в базе: `() => Number`<br/>Пример: `9799` */
        "externalId.tmdb"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Человек паук` */
        name?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Spider man` */
        alternativeName?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Spider man` */
        enName?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "names.name"?: string[];
        /** @description Тип тайтла. Доступны: movie | tv-series | cartoon | anime | animated-series | tv-show. <br/>Тип в базе: `() => String`<br/>Пример: `movie` */
        type?: string[];
        /** @description Тип тайтла в числовом обозначении. Доступны: 1 (movie) | 2 (tv-series) | 3 (cartoon) | 4 (anime) | 5 (animated-series) | 6 (tv-show). <br/>Тип в базе: `() => Number`<br/>Пример: `1` */
        typeNumber?: string[];
        /** @description Год премьеры. При поиске по этому полю, можно использовать интервалы 1860-2030. <br/>Тип в базе: `() => Number`<br/>Пример: `2023` */
        year?: string[] | null;
        /** @description Описание тайтла. <br/>Тип в базе: `() => String` */
        description?: string[] | null;
        /** @description Сокращенное описание. <br/>Тип в базе: `() => String` */
        shortDescription?: string[] | null;
        /** @description Слоган. <br/>Тип в базе: `() => String` */
        slogan?: string[] | null;
        /** @description Статус релиза тайтла. Доступные значения: filming | pre-production | completed | announced | post-production. <br/>Тип в базе: `() => String`<br/>Пример: `completed` */
        status?: string[] | null;
        /** @description Рейтинг кинопоиска. <br/>Тип в базе: `() => Number`<br/>Пример: `6.2` */
        "rating.kp"?: string[] | null;
        /** @description Рейтинг IMDB. <br/>Тип в базе: `() => Number`<br/>Пример: `8.4` */
        "rating.imdb"?: string[] | null;
        /** @description Рейтинг TMDB. <br/>Тип в базе: `() => Number`<br/>Пример: `3.2` */
        "rating.tmdb"?: string[] | null;
        /** @description Рейтинг кинокритиков. <br/>Тип в базе: `() => Number`<br/>Пример: `10` */
        "rating.filmCritics"?: string[] | null;
        /** @description Рейтинг кинокритиков из РФ. <br/>Тип в базе: `() => Number`<br/>Пример: `5.1` */
        "rating.russianFilmCritics"?: string[] | null;
        /** @description Рейтинг основанный на ожиданиях пользователей. <br/>Тип в базе: `() => Number`<br/>Пример: `6.1` */
        "rating.await"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `60000` */
        "votes.kp"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `50000` */
        "votes.imdb"?: string[] | null;
        /** @description Тип в базе: `() => Number`<br/>Пример: `10000` */
        "votes.tmdb"?: string[] | null;
        /** @description Количество голосов кинокритиков. <br/>Тип в базе: `() => Number`<br/>Пример: `10000` */
        "votes.filmCritics"?: string[] | null;
        /** @description Количество голосов кинокритиков из РФ. <br/>Тип в базе: `() => Number`<br/>Пример: `4000` */
        "votes.russianFilmCritics"?: string[] | null;
        /** @description Количество ожидающих выхода. <br/>Тип в базе: `() => Number`<br/>Пример: `34000` */
        "votes.await"?: string[] | null;
        /** @description Продолжительность фильма. <br/>Тип в базе: `() => Number`<br/>Пример: `120` */
        movieLength?: string[] | null;
        /** @description Возрастной рейтинг по MPAA. <br/>Тип в базе: `() => String`<br/>Пример: `pg13` */
        ratingMpaa?: string[] | null;
        /** @description Возрастной рейтинг. <br/>Тип в базе: `() => Number`<br/>Пример: `16` */
        ageRating?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "logo.url"?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "poster.url"?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "poster.previewUrl"?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "backdrop.url"?: string[] | null;
        /** @description Чтобы найти фильмы с этим полем, используйте: `!null`. <br/>Тип в базе: `() => String` */
        "backdrop.previewUrl"?: string[] | null;
        /** @description Url трейлера. <br/>Тип в базе: `() => String`<br/>Пример: `https://www.youtube.com/embed/ZsJz2TJAPjw` */
        "videos.trailers.url"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Official Trailer` */
        "videos.trailers.name"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `youtube` */
        "videos.trailers.site"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `TRAILER` */
        "videos.trailers.type"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "genres.name"?: string[];
        /** @description Тип в базе: `() => String` */
        "countries.name"?: string[];
        /** @description Id персоны с кинопоиска. <br/>Тип в базе: `() => Number`<br/>Пример: `6317` */
        "persons.id"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `https://st.kp.yandex.net/images/actor_iphone/iphone360_6317.jpg` */
        "persons.photo"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Пол Уокер` */
        "persons.name"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `Paul Walker` */
        "persons.enName"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "reviewInfo.count"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "reviewInfo.positiveCount"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "reviewInfo.percentage"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "seasonsInfo.number"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "seasonsInfo.episodesCount"?: string[] | null;
        /** @description Сумма. <br/>Тип в базе: `() => Number`<br/>Пример: `207283` */
        "budget.value"?: string[] | null;
        /** @description Валюта. <br/>Тип в базе: `() => String`<br/>Пример: `€` */
        "budget.currency"?: string[] | null;
        /** @description Сумма. <br/>Тип в базе: `() => Number`<br/>Пример: `207283` */
        "fees.world.value"?: string[] | null;
        /** @description Валюта. <br/>Тип в базе: `() => String`<br/>Пример: `€` */
        "fees.world.currency"?: string[] | null;
        /** @description Сумма. <br/>Тип в базе: `() => Number`<br/>Пример: `207283` */
        "fees.russia.value"?: string[] | null;
        /** @description Валюта. <br/>Тип в базе: `() => String`<br/>Пример: `€` */
        "fees.russia.currency"?: string[] | null;
        /** @description Сумма. <br/>Тип в базе: `() => Number`<br/>Пример: `207283` */
        "fees.usa.value"?: string[] | null;
        /** @description Валюта. <br/>Тип в базе: `() => String`<br/>Пример: `€` */
        "fees.usa.currency"?: string[] | null;
        /** @description Тип в базе: `() => String`<br/>Пример: `США` */
        "premiere.country"?: string[] | null;
        /** @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023. <br/>Тип в базе: `function Date() { [native code] }`<br/>Пример: `2023-02-25T02:44:39.359Z` */
        "premiere.world"?: string[] | null;
        /** @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023. <br/>Тип в базе: `function Date() { [native code] }`<br/>Пример: `2023-02-25T02:44:39.359Z` */
        "premiere.russia"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "premiere.digital"?: string[] | null;
        /** @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023. <br/>Тип в базе: `function Date() { [native code] }`<br/>Пример: `2023-02-25T02:44:39.359Z` */
        "premiere.cinema"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "similarMovies.id"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "sequelsAndPrequels.id"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "watchability.items.name"?: string[] | null;
        /** @description Год начала. <br/>Тип в базе: `() => Number`<br/>Пример: `2022` */
        "releaseYears.start"?: string[] | null;
        /** @description Год окончания. <br/>Тип в базе: `() => Number`<br/>Пример: `2023` */
        "releaseYears.end"?: string[] | null;
        /** @description Позиция тайтла в топ 10. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`. <br/>Тип в базе: `() => Number`<br/>Пример: `1` */
        top10?: string[] | null;
        /** @description Позиция тайтла в топ 250. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`. <br/>Тип в базе: `() => Number`<br/>Пример: `200` */
        top250?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieDocsResponseDtoV1"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Поиск по id
   * @deprecated
   * @description Эта версия эндпоинта устарела. Новый в 1.3 версии.
   */
  MovieController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieDtoV1"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Получить рандомный тайтл из базы
   * @description Этот метод не принимает ни каких параметров, так как выборка в нем уже достаточно релевантная. В него попадают тайтлы не старше 10 лет, рейтинг которых больше 6, есть название и постер.
   */
  MovieController_getRandomMovie: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieDtoV1"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["MovieDtoV1"];
        };
      };
    };
  };
  /**
   * Получить все возможные значения полей
   * @description Этот метод принимает только определенные поля, и возвращает по ним все доступные значения.
   */
  MovieController_getPossibleValuesByFieldName: {
    parameters: {
      query: {
        field: "genres.name" | "countries.name" | "type" | "typeNumber" | "status";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PossibleValueDto"][];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["PossibleValueDto"][];
        };
      };
    };
  };
  /** Поиск сезонов */
  SeasonController_findManyByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Тип в базе: `() => Number` */
        movieId?: string[];
        /** @description Тип в базе: `() => Number` */
        number?: string[];
        /** @description Тип в базе: `() => Number` */
        episodesCount?: string[];
        /** @description Тип в базе: `() => Number` */
        "episodes.number"?: string[];
        /** @description Тип в базе: `() => String` */
        "episodes.name"?: string[];
        /** @description Тип в базе: `() => String` */
        "episodes.enName"?: string[];
        /** @description Тип в базе: `() => String` */
        "episodes.description"?: string[];
        /** @description Тип в базе: `() => String` */
        "episodes.date"?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SeasonDocsResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /** Поиск отзывов */
  ReviewController_findManyByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Тип в базе: `() => Number` */
        id?: string[];
        /** @description Тип в базе: `() => Number` */
        movieId?: string[];
        /** @description Тип в базе: `() => String` */
        title?: string[];
        /** @description Тип в базе: `() => String` */
        type?: string[];
        /** @description Тип в базе: `() => String` */
        review?: string[];
        /** @description Тип в базе: `() => String` */
        date?: string[];
        /** @description Тип в базе: `() => String` */
        author?: string[];
        /** @description Тип в базе: `() => Number` */
        authorId?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReviewDocsResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Полнотекстовый поиск
   * @description Этот метод предназначен для полнотекстового поиска персон по текстовому запросу. Он принимает только один параметр `query`. Если вам нужны фильтры, гибкость и множество результатов, используйте метод `Универсальный поиск с фильтрами` (findMany). В этом методе также не доступен выбор полей. А в ответ приходит упрощенная модель, которая подходит только для отображения результатов поиска.
   */
  PersonController_searchPerson: {
    parameters: {
      query: {
        /** @description Страница выборки */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Поисковый запрос */
        query: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SearchPersonResponseDto"];
        };
      };
    };
  };
  /** Награды актеров */
  PersonController_findManyAwardsByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Тип в базе: `function String() { [native code] }` */
        "nomination.award.title"?: string[];
        /** @description Тип в базе: `function Number() { [native code] }` */
        "nomination.award.year"?: string[];
        /** @description Тип в базе: `function String() { [native code] }` */
        "nomination.title"?: string[];
        /** @description Тип в базе: `() => Boolean` */
        winning?: string[];
        /** @description Тип в базе: `() => Number` */
        personId?: string[];
        /** @description Тип в базе: `() => Number` */
        "movie.id"?: string[];
        /** @description Тип в базе: `() => String` */
        "movie.name"?: string[];
        /** @description Тип в базе: `() => Number` */
        "movie.rating"?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonAwardDocsResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /** Универсальный поиск персон с фильтрами */
  PersonController_findManyByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Тип в базе: `() => Number` */
        id?: string[];
        /** @description Тип в базе: `() => String` */
        name?: string[] | null;
        /** @description Тип в базе: `() => String` */
        enName?: string[] | null;
        /** @description Тип в базе: `() => String` */
        photo?: string[] | null;
        /** @description Тип в базе: `() => String` */
        sex?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        growth?: string[] | null;
        /** @description Тип в базе: `() => String` */
        birthday?: string[] | null;
        /** @description Тип в базе: `() => String` */
        death?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        age?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "birthPlace.value"?: string[];
        /** @description Тип в базе: `() => String` */
        "deathPlace.value"?: string[];
        /** @description Тип в базе: `() => Number` */
        "spouses.id"?: string[];
        /** @description Тип в базе: `() => String` */
        "spouses.name"?: string[];
        /** @description Тип в базе: `() => Boolean` */
        "spouses.divorced"?: string[];
        /** @description Тип в базе: `() => String` */
        "spouses.divorcedReason"?: string[];
        /** @description Тип в базе: `() => String` */
        "spouses.sex"?: string[];
        /** @description Тип в базе: `() => Number` */
        "spouses.children"?: string[];
        /** @description Тип в базе: `() => String` */
        "spouses.relation"?: string[];
        /** @description Тип в базе: `() => Number` */
        countAwards?: string[];
        /** @description Тип в базе: `() => String` */
        "profession.value"?: string[];
        /** @description Тип в базе: `() => String` */
        "facts.value"?: string[];
        /** @description Тип в базе: `() => Number` */
        "movies.id"?: string[];
        /** @description Тип в базе: `() => String` */
        "movies.name"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "movies.alternativeName"?: string[] | null;
        /** @description Тип в базе: `() => Number` */
        "movies.rating"?: string[] | null;
        /** @description Тип в базе: `() => Boolean` */
        "movies.general"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "movies.description"?: string[] | null;
        /** @description Тип в базе: `() => String` */
        "movies.enProfession"?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonDocsResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Поиск по id
   * @description Возвращает всю доступную информацию о сущности.
   */
  PersonController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /** Поиск студий */
  StudioController_findManyByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Тип в базе: `() => String` */
        id?: string[];
        /** @description Тип в базе: `() => String` */
        subType?: string[];
        /** @description Тип в базе: `() => String` */
        title?: string[];
        /** @description Тип в базе: `function String() { [native code] }` */
        type?: string[];
        /** @description Тип в базе: `() => Number` */
        "movies.id"?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudioDocsResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Поиск по id
   * @description Возвращает всю доступную информацию о сущности.
   */
  StudioController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Studio"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /** Поиск по ключевым словам */
  KeywordController_findManyByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Тип в базе: `() => String` */
        id?: string[];
        /** @description Тип в базе: `() => String` */
        title?: string[];
        /** @description Тип в базе: `() => Number` */
        "movies.id"?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["KeywordDocsResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /** Поиск изображений */
  ImageController_findManyByQuery: {
    parameters: {
      query?: {
        /** @description Поля которые нужно вывести в ответе. Если не указано, то будут выведены поля по умолчанию. <br/>Тип в базе: `() => [String]`<br/>Пример: `id name` */
        selectFields?: string[];
        /** @description Поля по которым нужно отсортировать. Доступны все любые поля из модели. <br/>Тип в базе: `() => String`<br/>Пример: `year | rating.kp | votes.kp` */
        sortField?: string[];
        /** @description Тип сортировки. Для каждого поля нужно указать тип сортировки: 1 - по возрастанию -1 - по убыванию. <br/>Тип в базе: `() => [String]`<br/>Пример: `1 | -1` */
        sortType?: string[];
        /** @description Страница выборки. <br/>Тип в базе: `() => Number` */
        page?: string[];
        /** @description Количество элементов на странице. <br/>Тип в базе: `() => Number` */
        limit?: string[];
        /** @description Тип в базе: `() => Number` */
        movieId?: string[];
        /** @description Тип в базе: `() => String` */
        type?: string[];
        /** @description Тип в базе: `() => String` */
        language?: string[];
        /** @description Тип в базе: `() => String` */
        url?: string[];
        /** @description Тип в базе: `() => String` */
        previewUrl?: string[];
        /** @description Тип в базе: `() => Number` */
        height?: string[];
        /** @description Тип в базе: `() => Number` */
        width?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ImageDocsResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
}
