/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1.4/movie/{id}": {
    /**
     * Поиск по id
     * @description Возвращает всю доступную информацию о сущности.
     */
    get: operations["MovieController_findOneV1_4"];
  };
  "/v1.4/movie": {
    /**
     * Универсальный поиск с фильтрами
     * @description Этот метод вернет список фильмов удовлетворяющих вашему запросу. <br> В ответе придут поля указанные в параметре `selectFields`. Если его не указать, то вернутся только дефолтные поля.
     */
    get: operations["MovieController_findManyByQueryV1_4"];
  };
  "/v1.4/movie/search": {
    /**
     * Поиск фильмов по названию
     * @description Этот метод вернет список фильмов которые подходят под ваш запрос.
     */
    get: operations["MovieController_searchMovieV1_4"];
  };
  "/v1.4/movie/random": {
    /**
     * Получить рандомный тайтл из базы
     * @description Этот метод вернет рандомный тайтл из базы. Вы можете составить фильтр, чтобы получить рандомный тайтл по вашим критериям.
     */
    get: operations["MovieController_getRandomMovieV1_4"];
  };
  "/v1.4/movie/awards": {
    /** Награды тайтлов */
    get: operations["MovieController_findManyAwardsV1_4"];
  };
  "/v1/movie/possible-values-by-field": {
    /**
     * Получить список стран, жанров, и т.д.
     * @description Этот метод принимает только определенные поля, и возвращает по ним все доступные значения.
     */
    get: operations["MovieController_getPossibleValuesByFieldName"];
  };
  "/v1.4/season": {
    /** Поиск сезонов */
    get: operations["SeasonController_findManyV1_4"];
  };
  "/v1.4/review": {
    /**
     * Универсальный поиск с фильтрами
     * @description Этот метод предназначен для поиска персон по фильтрам. Он принимает множество параметров, которые можно комбинировать между собой. Если вам нужен только поиск по имени, используйте метод `Полнотекстовый поиск` (search). В этом методе также доступен выбор полей. А в ответ приходит полная модель персоны.
     */
    get: operations["ReviewController_findManyV1_4"];
  };
  "/v1.4/person/{id}": {
    /**
     * Поиск по id
     * @description Возвращает всю доступную информацию о сущности.
     */
    get: operations["PersonController_findOneV1_4"];
  };
  "/v1.4/person": {
    /**
     * Универсальный поиск с фильтрами
     * @description Этот метод вернет список персон удовлетворяющих вашему запросу. <br> В ответе придут поля указанные в параметре `selectFields`. Если его не указать, то вернутся только дефолтные поля.
     */
    get: operations["PersonController_findManyV1_4"];
  };
  "/v1.4/person/search": {
    /**
     * Поиск актеров, режиссеров, и т.д по имени
     * @description Этот метод вернет список персон которые подходят под ваш запрос.
     */
    get: operations["PersonController_searchPersonV1_4"];
  };
  "/v1.4/person/awards": {
    /** Награды актеров */
    get: operations["PersonController_findManyAwardsV1_4"];
  };
  "/v1.4/studio": {
    /**
     * Поиск студий
     * @description Этот метод предназначен для поиска студий
     */
    get: operations["StudioController_findManyV1_4"];
  };
  "/v1.4/keyword": {
    /**
     * Поиск ключевых слов
     * @description Этот метод предназначен для поиска ключевых слов
     */
    get: operations["KeywordController_findManyV1_4"];
  };
  "/v1.4/image": {
    /**
     * Поиск картинок
     * @description Этот метод предназначен для поиска картинок которые привязаны к фильмам и сериалам
     */
    get: operations["ImageController_findManyV1_4"];
  };
  "/v1.4/list": {
    /**
     * Поиск коллекций
     * @description Этот метод предназначен для поиска коллекций кино
     */
    get: operations["ListController_findManyV1_4"];
  };
  "/v1.4/list/{slug}": {
    /**
     * Поиск коллекции по slug
     * @description Этот метод предназначен для поиска коллекции кино по slug
     */
    get: operations["ListController_findOneV1_4"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ExternalId: {
      /**
       * @description ID из kinopoisk HD
       * @example 48e8d0acb0f62d8585101798eaeceec5
       */
      kpHD?: string | null;
      /** @example tt0232500 */
      imdb?: string | null;
      /** @example 9799 */
      tmdb?: number | null;
    };
    Name: {
      name?: string;
      language?: string | null;
      type?: string | null;
    };
    Rating: {
      /**
       * @description Рейтинг кинопоиска
       * @example 6.2
       */
      kp?: number | null;
      /**
       * @description Рейтинг IMDB
       * @example 8.4
       */
      imdb?: number | null;
      /**
       * @description Рейтинг TMDB
       * @example 3.2
       */
      tmdb?: number | null;
      /**
       * @description Рейтинг кинокритиков
       * @example 10
       */
      filmCritics?: number | null;
      /**
       * @description Рейтинг кинокритиков из РФ
       * @example 5.1
       */
      russianFilmCritics?: number | null;
      /**
       * @description Рейтинг основанный на ожиданиях пользователей
       * @example 6.1
       */
      await?: number | null;
    };
    Votes: {
      /** @example 60000 */
      kp?: string | null;
      /** @example 50000 */
      imdb?: number | null;
      /** @example 10000 */
      tmdb?: number | null;
      /**
       * @description Количество голосов кинокритиков
       * @example 10000
       */
      filmCritics?: number | null;
      /**
       * @description Количество голосов кинокритиков из РФ
       * @example 4000
       */
      russianFilmCritics?: number | null;
      /**
       * @description Количество ожидающих выхода
       * @example 34000
       */
      await?: number | null;
    };
    Logo: {
      /** @description Чтобы найти фильмы с этим полем, используйте: `!null` */
      url?: string | null;
    };
    ShortImage: {
      /** @description Чтобы найти фильмы с этим полем, используйте: `!null` */
      url?: string | null;
      /** @description Чтобы найти фильмы с этим полем, используйте: `!null` */
      previewUrl?: string | null;
    };
    Video: {
      /**
       * @description Url трейлера
       * @example https://www.youtube.com/embed/ZsJz2TJAPjw
       */
      url?: string | null;
      /** @example Official Trailer */
      name?: string | null;
      /** @example youtube */
      site?: string | null;
      /** @example TRAILER */
      type?: string | null;
      size: number;
    };
    VideoTypes: {
      trailers?: components["schemas"]["Video"][];
      teasers: components["schemas"]["Video"][];
    };
    ItemName: {
      name?: string;
    };
    PersonInMovie: {
      /**
       * @description Id персоны с кинопоиска
       * @example 6317
       */
      id?: number | null;
      /** @example https://st.kp.yandex.net/images/actor_iphone/iphone360_6317.jpg */
      photo?: string | null;
      /** @example Пол Уокер */
      name?: string | null;
      /** @example Paul Walker */
      enName?: string | null;
      description: string;
      profession: string;
      enProfession: string;
    };
    ReviewInfo: {
      count?: number | null;
      positiveCount?: number | null;
      percentage?: string | null;
    };
    SeasonInfo: {
      number?: number | null;
      episodesCount?: number | null;
    };
    CurrencyValue: {
      /**
       * @description Сумма
       * @example 207283
       */
      value?: number | null;
      /**
       * @description Валюта
       * @example €
       */
      currency?: string | null;
    };
    Fees: {
      world?: components["schemas"]["CurrencyValue"];
      russia?: components["schemas"]["CurrencyValue"];
      usa?: components["schemas"]["CurrencyValue"];
    };
    Premiere: {
      /** @example США */
      country?: string | null;
      /**
       * Format: date-time
       * @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
       * @example 2023-02-25T02:44:39.359Z
       */
      world?: string | null;
      /**
       * Format: date-time
       * @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
       * @example 2023-02-25T02:44:39.359Z
       */
      russia?: string | null;
      digital?: string | null;
      /**
       * Format: date-time
       * @description Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
       * @example 2023-02-25T02:44:39.359Z
       */
      cinema?: string | null;
      bluray: string;
      dvd: string;
    };
    LinkedMovieV1_4: {
      id?: number | null;
      rating: components["schemas"]["Rating"];
      /** @example 2021 */
      year: number;
      name: string;
      enName: string;
      alternativeName: string;
      type?: string;
      poster: components["schemas"]["ShortImage"];
    };
    WatchabilityItem: {
      name?: string | null;
      logo: components["schemas"]["Logo"];
      url: string;
    };
    Watchability: {
      items?: components["schemas"]["WatchabilityItem"][];
    };
    YearRange: {
      /**
       * @description Год начала
       * @example 2022
       */
      start?: number | null;
      /**
       * @description Год окончания
       * @example 2023
       */
      end?: number | null;
    };
    Audience: {
      /**
       * @description Количество просмотров в кино
       * @example 1000
       */
      count: number;
      /**
       * @description Страна в которой проходил показ
       * @example Россия
       */
      country: string;
    };
    NetworkItemV1_4: {
      /** @example Netflix */
      name: string;
      logo: components["schemas"]["Logo"];
    };
    NetworksV1_4: {
      items: components["schemas"]["NetworkItemV1_4"][];
    };
    FactInMovie: {
      value: string;
      type: string;
      spoiler: boolean;
    };
    Images: {
      postersCount: number;
      backdropsCount: number;
      framesCount: number;
    };
    MovieDtoV1_4: {
      /**
       * @description Id фильма с кинопоиска
       * @example 666
       */
      id: number;
      externalId: components["schemas"]["ExternalId"];
      /** @example Человек паук */
      name?: string | null;
      /** @example Spider man */
      alternativeName?: string | null;
      /** @example Spider man */
      enName?: string | null;
      names: components["schemas"]["Name"][];
      /**
       * @description Тип тайтла. Доступны: movie | tv-series | cartoon | anime | animated-series | tv-show
       * @example movie
       */
      type: string;
      /**
       * @description Тип тайтла в числовом обозначении. Доступны: 1 (movie) | 2 (tv-series) | 3 (cartoon) | 4 (anime) | 5 (animated-series) | 6 (tv-show)
       * @example 1
       */
      typeNumber: number;
      /**
       * @description Год премьеры. При поиске по этому полю, можно использовать интервалы 1860-2030
       * @example 2023
       */
      year?: number | null;
      /** @description Описание тайтла */
      description?: string | null;
      /** @description Сокращенное описание */
      shortDescription?: string | null;
      /** @description Слоган */
      slogan?: string | null;
      /**
       * @description Статус релиза тайтла. Доступные значения: filming | pre-production | completed | announced | post-production
       * @example completed
       */
      status?: string | null;
      rating?: components["schemas"]["Rating"];
      votes?: components["schemas"]["Votes"];
      /**
       * @description Продолжительность фильма
       * @example 120
       */
      movieLength?: number | null;
      /**
       * @description Возрастной рейтинг по MPAA
       * @example pg13
       */
      ratingMpaa?: string | null;
      /**
       * @description Возрастной рейтинг
       * @example 16
       */
      ageRating?: number | null;
      logo?: components["schemas"]["Logo"];
      poster?: components["schemas"]["ShortImage"];
      backdrop?: components["schemas"]["ShortImage"];
      videos?: components["schemas"]["VideoTypes"];
      genres?: components["schemas"]["ItemName"][];
      countries?: components["schemas"]["ItemName"][];
      persons?: components["schemas"]["PersonInMovie"][];
      reviewInfo?: components["schemas"]["ReviewInfo"];
      seasonsInfo?: components["schemas"]["SeasonInfo"][];
      budget?: components["schemas"]["CurrencyValue"];
      fees?: components["schemas"]["Fees"];
      premiere?: components["schemas"]["Premiere"];
      similarMovies?: components["schemas"]["LinkedMovieV1_4"][];
      sequelsAndPrequels?: components["schemas"]["LinkedMovieV1_4"][];
      watchability?: components["schemas"]["Watchability"];
      releaseYears?: components["schemas"]["YearRange"][];
      /**
       * @description Позиция тайтла в топ 10. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`
       * @example 1
       */
      top10?: number | null;
      /**
       * @description Позиция тайтла в топ 250. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`
       * @example 200
       */
      top250?: number | null;
      /**
       * @description Признак того, что тайтл находится в прокате
       * @example true
       */
      ticketsOnSale?: boolean | null;
      /**
       * @description Продолжительность всех серий
       * @example 155
       */
      totalSeriesLength?: number | null;
      /**
       * @description Средняя продолжительность серии
       * @example 20
       */
      seriesLength?: number | null;
      /**
       * @description Признак сериала
       * @example true
       */
      isSeries: boolean;
      audience?: components["schemas"]["Audience"][] | null;
      /**
       * @description Список коллекций, в которых находится тайтл.
       * @example [
       *   "250 лучших сериалов"
       * ]
       */
      lists?: string[] | null;
      networks: components["schemas"]["NetworksV1_4"][];
      facts: components["schemas"]["FactInMovie"][];
      imagesInfo: components["schemas"]["Images"];
    };
    UnauthorizedErrorResponseDto: {
      /** @example 401 */
      statusCode: number;
      /** @example В запросе не указан токен! */
      message: string;
      /** @example Unauthorized */
      error: string;
    };
    ForbiddenErrorResponseDto: {
      /** @example 403 */
      statusCode: number;
      /** @example Превышен дневной лимит! */
      message: string;
      /** @example Forbidden */
      error: string;
    };
    ErrorResponseDto: {
      statusCode: number;
      message: string;
      error: string;
    };
    MovieDocsResponseDtoV1_4: {
      docs: components["schemas"]["MovieDtoV1_4"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    SearchMovieDtoV1_4: {
      id: number;
      name: string;
      alternativeName: string;
      enName: string;
      type: string;
      year: number;
      description: string;
      shortDescription: string;
      movieLength: number;
      names: components["schemas"]["Name"][];
      logo?: components["schemas"]["Logo"];
      poster?: components["schemas"]["ShortImage"];
      backdrop?: components["schemas"]["ShortImage"];
      rating?: components["schemas"]["Rating"];
      votes?: components["schemas"]["Votes"];
      genres?: components["schemas"]["ItemName"][];
      countries?: components["schemas"]["ItemName"][];
      releaseYears?: components["schemas"]["YearRange"][];
      isSeries: boolean;
      ticketsOnSale: boolean;
      totalSeriesLength: number;
      seriesLength: number;
      ratingMpaa: string;
      ageRating: number;
      top10?: number | null;
      top250?: number | null;
      typeNumber: number;
      status: string;
      internalNames: string[];
      internalRating: number;
      internalVotes: number;
    };
    SearchMovieResponseDtoV1_4: {
      docs: components["schemas"]["SearchMovieDtoV1_4"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    NominationAward: {
      title: string;
      year: number;
    };
    Nomination: {
      award: components["schemas"]["NominationAward"];
      title: string;
    };
    PartialTypeClass: {
      nomination?: components["schemas"]["Nomination"];
      winning?: boolean;
      movieId?: number;
    };
    MovieAwardDocsResponseDto: {
      docs: components["schemas"]["PartialTypeClass"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    PossibleValueDto: {
      /** @description Значение по которому нужно делать запрос в базу данных */
      name: string;
      /** @description Вспомогательное значение */
      slug: string;
    };
    EpisodeV1_4: {
      number?: number;
      name?: string;
      enName?: string;
      /** @deprecated */
      date?: string;
      description?: string;
      still?: components["schemas"]["ShortImage"];
      airDate?: string;
      enDescription?: string;
    };
    SeasonV1_4: {
      movieId?: number;
      number?: number;
      episodesCount?: number;
      episodes?: components["schemas"]["EpisodeV1_4"][];
      poster?: components["schemas"]["ShortImage"];
      name?: string;
      enName?: string;
      duration?: number;
      description?: string;
      enDescription?: string;
      airDate?: string;
    };
    SeasonDocsResponseDtoV1_4: {
      docs: components["schemas"]["SeasonV1_4"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    Review: {
      id?: number;
      movieId?: number;
      title?: string;
      type?: string;
      review?: string;
      date?: string;
      author?: string;
      authorId?: number;
      userRating: number;
    };
    ReviewDocsResponseDtoV1_4: {
      docs: components["schemas"]["Review"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    BirthPlace: {
      value?: string;
    };
    DeathPlace: {
      value?: string;
    };
    Spouses: {
      id?: number;
      name?: string;
      divorced?: boolean;
      divorcedReason?: string;
      sex?: string;
      children?: number;
      relation?: string;
    };
    Profession: {
      value?: string;
    };
    FactInPerson: {
      value?: string;
    };
    MovieInPerson: {
      id: number;
      name?: string | null;
      alternativeName?: string | null;
      rating?: number | null;
      general?: boolean | null;
      description?: string | null;
      enProfession?: string | null;
    };
    Person: {
      id: number;
      name?: string | null;
      enName?: string | null;
      photo?: string | null;
      sex?: string | null;
      growth?: number | null;
      birthday?: string | null;
      death?: string | null;
      age?: number | null;
      birthPlace?: components["schemas"]["BirthPlace"][];
      deathPlace?: components["schemas"]["DeathPlace"][];
      spouses?: components["schemas"]["Spouses"];
      countAwards?: number;
      profession?: components["schemas"]["Profession"][];
      facts?: components["schemas"]["FactInPerson"][];
      movies?: components["schemas"]["MovieInPerson"][];
    };
    PersonDocsResponseDtoV1_4: {
      docs: components["schemas"]["Person"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    MeiliPersonEntityV1_4: {
      1: Record<string, never>;
      id: number;
      name: string;
      enName: string;
      photo: string;
      sex: string;
      birthday: string;
      death: string;
      age: number;
      birthPlace?: components["schemas"]["BirthPlace"][];
      deathPlace?: components["schemas"]["DeathPlace"][];
      profession?: components["schemas"]["Profession"][];
      growth: number;
    };
    SearchPersonResponseDtoV1_4: {
      docs: components["schemas"]["MeiliPersonEntityV1_4"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    Movie: {
      id: number;
      name: string;
      rating: number;
    };
    PersonAward: {
      nomination: components["schemas"]["Nomination"];
      winning: boolean;
      personId: number;
      movie: components["schemas"]["Movie"];
    };
    PersonAwardDocsResponseDto: {
      docs: components["schemas"]["PersonAward"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    MovieFromStudio: {
      id?: number;
    };
    Studio: {
      id: string;
      subType: string;
      title: string;
      /** @enum {string} */
      type?: "Производство" | "Спецэффекты" | "Прокат" | "Студия дубляжа";
      movies?: components["schemas"]["MovieFromStudio"];
    };
    StudioDocsResponseDtoV1_4: {
      docs: components["schemas"]["Studio"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    MovieFromKeyword: {
      id?: number;
    };
    Keyword: {
      id: string;
      title: string;
      movies?: components["schemas"]["MovieFromKeyword"];
    };
    KeywordDocsResponseDtoV1_4: {
      docs: components["schemas"]["Keyword"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    Image: {
      movieId: number;
      type?: string;
      language?: string;
      url?: string;
      previewUrl?: string;
      height?: number;
      width?: number;
    };
    ImageDocsResponseDtoV1_4: {
      docs: components["schemas"]["Image"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
    List: {
      category: string;
      slug: string;
      moviesCount: number;
      cover: components["schemas"]["ShortImage"];
      name: string;
    };
    ListDocsResponseDtoV1_4: {
      docs: components["schemas"]["List"][];
      /** @description Общее количество результатов */
      total: number;
      /** @description Количество результатов на странице */
      limit: number;
      /** @description Текущая страница */
      page: number;
      /** @description Сколько страниц всего */
      pages: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Поиск по id
   * @description Возвращает всю доступную информацию о сущности.
   */
  MovieController_findOneV1_4: {
    parameters: {
      path: {
        /** @description ID из кинопоиска */
        id: number | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieDtoV1_4"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Универсальный поиск с фильтрами
   * @description Этот метод вернет список фильмов удовлетворяющих вашему запросу. <br> В ответе придут поля указанные в параметре `selectFields`. Если его не указать, то вернутся только дефолтные поля.
   */
  MovieController_findManyByQueryV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("id" | "externalId" | "name" | "enName" | "alternativeName" | "names" | "description" | "shortDescription" | "slogan" | "type" | "typeNumber" | "isSeries" | "status" | "year" | "releaseYears" | "rating" | "ratingMpaa" | "ageRating" | "votes" | "budget" | "audience" | "movieLength" | "seriesLength" | "totalSeriesLength" | "genres" | "countries" | "poster" | "backdrop" | "logo" | "ticketsOnSale" | "videos" | "networks" | "persons" | "facts" | "fees" | "premiere" | "similarMovies" | "sequelsAndPrequels" | "watchability" | "lists" | "top10" | "top250")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("id" | "externalId.imdb" | "externalId.tmdb" | "externalId.kpHD" | "name" | "enName" | "alternativeName" | "names.name" | "description" | "shortDescription" | "slogan" | "type" | "typeNumber" | "isSeries" | "status" | "year" | "releaseYears.start" | "releaseYears.end" | "rating.kp" | "rating.imdb" | "rating.tmdb" | "rating.filmCritics" | "rating.russianFilmCritics" | "rating.await" | "ratingMpaa" | "ageRating" | "votes.kp" | "votes.imdb" | "votes.tmdb" | "votes.filmCritics" | "votes.russianFilmCritics" | "votes.await" | "budget.value" | "budget.currency" | "audience.count" | "audience.country" | "movieLength" | "seriesLength" | "totalSeriesLength" | "genres.name" | "countries.name" | "poster.url" | "backdrop.url" | "logo.url" | "ticketsOnSale" | "videos.trailers.url" | "videos.trailers.site" | "videos.trailers.name" | "networks.items.name" | "networks.items.logo.url" | "persons.id" | "persons.name" | "persons.enName" | "persons.photo" | "persons.description" | "persons.profession" | "persons.enProfession" | "facts.type" | "facts.value" | "facts.spoiler" | "fees.world" | "fees.usa" | "fees.russia" | "premiere.world" | "premiere.usa" | "premiere.russia" | "premiere.digital" | "premiere.dvd" | "premiere.bluRay" | "premiere.cinema" | "premiere.country" | "similarMovies.id" | "similarMovies.name" | "similarMovies.enName" | "similarMovies.alternativeName" | "similarMovies.poster.url" | "sequelsAndPrequels.id" | "sequelsAndPrequels.name" | "sequelsAndPrequels.enName" | "sequelsAndPrequels.alternativeName" | "sequelsAndPrequels.poster.url" | "watchability.items.name" | "watchability.items.url" | "watchability.items.logo.url" | "lists" | "top10" | "top250")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("id" | "externalId.imdb" | "externalId.tmdb" | "externalId.kpHD" | "name" | "enName" | "alternativeName" | "names.name" | "description" | "shortDescription" | "slogan" | "type" | "typeNumber" | "isSeries" | "status" | "year" | "releaseYears.start" | "releaseYears.end" | "rating.kp" | "rating.imdb" | "rating.tmdb" | "rating.filmCritics" | "rating.russianFilmCritics" | "rating.await" | "ratingMpaa" | "ageRating" | "votes.kp" | "votes.imdb" | "votes.tmdb" | "votes.filmCritics" | "votes.russianFilmCritics" | "votes.await" | "budget.value" | "budget.currency" | "audience.count" | "audience.country" | "movieLength" | "seriesLength" | "totalSeriesLength" | "genres.name" | "countries.name" | "poster.url" | "backdrop.url" | "logo.url" | "ticketsOnSale" | "videos.trailers.url" | "videos.trailers.site" | "videos.trailers.name" | "networks.items.name" | "networks.items.logo.url" | "persons.id" | "persons.name" | "persons.enName" | "persons.photo" | "persons.description" | "persons.profession" | "persons.enProfession" | "facts.type" | "facts.value" | "facts.spoiler" | "fees.world" | "fees.usa" | "fees.russia" | "premiere.world" | "premiere.usa" | "premiere.russia" | "premiere.digital" | "premiere.dvd" | "premiere.bluRay" | "premiere.cinema" | "premiere.country" | "similarMovies.id" | "similarMovies.name" | "similarMovies.enName" | "similarMovies.alternativeName" | "similarMovies.poster.url" | "sequelsAndPrequels.id" | "sequelsAndPrequels.name" | "sequelsAndPrequels.enName" | "sequelsAndPrequels.alternativeName" | "sequelsAndPrequels.poster.url" | "watchability.items.name" | "watchability.items.url" | "watchability.items.logo.url" | "lists" | "top10" | "top250")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск по ID KinoPoisk (пример: `"666", "555", "!666"`) */
        id?: string[] | null;
        /** @description Поиск по IMDB ID (пример: `"tt666", "tt555", "!tt666"`) */
        "externalId.imdb"?: string[] | null;
        /** @description Поиск по TMDB ID (пример: `666, 555, !666`) */
        "externalId.tmdb"?: number[] | null;
        /** @description Поиск по id KinoPoisk HD (пример: `"48e8d0acb0f62d8585101798eaeceec5", "!48e8d0acb0f62d8585101798eaeceec5"`) */
        "externalId.kpHD"?: string[] | null;
        /** @description Поиск по типу фильма (пример: `"movie", "tv-series", "!anime"`) */
        type?: (("movie" | "tv-series" | "cartoon" | "animated-series" | "anime")[]) | null;
        /** @description Поиск по номеру типа фильма (пример: `1, 2, !3`). Список типов: 1 (movie), 2 (tv-series), 3 (cartoon), 4 (anime), 5 (animated-series). */
        typeNumber?: string[] | null;
        /** @description Поиск по индикатору сериала (пример: `true, false`) */
        isSeries?: string[] | null;
        /** @description Поиск по статусу фильма (пример: `"announced", "completed", "!filming"`) */
        status?: (("announced" | "completed" | "filming" | "post-production" | "pre-production")[]) | null;
        /** @description Поиск по году (пример: `1874, 2050, !2020, 2020-2024`) */
        year?: string[] | null;
        /** @description Поиск по года начала релиза (пример: `1874, 2050, !2020, 2020-2024`) */
        "releaseYears.start"?: string[] | null;
        /** @description Поиск по года окончания релиза (пример: `1874, 2050, !2020, 2020-2024`) */
        "releaseYears.end"?: string[] | null;
        /** @description Поиск по рейтингу Кинопоиск (пример: `7, 10, 7.2-10`) */
        "rating.kp"?: string[] | null;
        /** @description Поиск по рейтингу IMDB (пример: `7, 10, 7.2-10`) */
        "rating.imdb"?: string[] | null;
        /** @description Поиск по рейтингу TMDB (пример: `7, 10, 7.2-10`) */
        "rating.tmdb"?: string[] | null;
        /** @description Поиск по рейтингу MPAA (пример: `"G", "NC-17", "!R"`) */
        ratingMpaa?: string[] | null;
        /** @description Поиск по возрастному рейтингу (пример: `12, !18, 12-18`) */
        ageRating?: string[] | null;
        /** @description Поиск по количеству голосов на KP (пример: `1000-6666666`) */
        "votes.kp"?: string[] | null;
        /** @description Поиск по количеству голосов на IMDB (пример: `1000-6666666`) */
        "votes.imdb"?: string[] | null;
        /** @description Поиск по количеству голосов на TMDB (пример: `1000-6666666`) */
        "votes.tmdb"?: string[] | null;
        /** @description Поиск по количеству голосов кинокритиков (пример: `1000-6666666`) */
        "votes.filmCritics"?: string[] | null;
        /** @description Поиск по количеству голосов кинокритиков из России (пример: `1000-6666666`) */
        "votes.russianFilmCritics"?: string[] | null;
        /** @description Поиск по количеству голосов ожидания на Кинопоиске (пример: `1000-6666666`) */
        "votes.await"?: string[] | null;
        /** @description Поиск по бюджету фильма (пример: `1000-6666666`) */
        "budget.value"?: string[] | null;
        /** @description Поиск по количеству аудитории (пример: `1000-6666666`) */
        "audience.count"?: string[] | null;
        /** @description Поиск по продолжительности фильма (пример: `100-120`) */
        movieLength?: string[] | null;
        /** @description Поиск по всей продолжительности одной серии (пример: `20-60`) */
        seriesLength?: string[] | null;
        /** @description Поиск по всей продолжительности сериала (пример: `100-120`) */
        totalSeriesLength?: string[] | null;
        /** @description Поиск по жанрам.<br> Если вам нужно найти фильмы содержащие любой из жанров указывайте так: `"драма", "комедия"`. <br> Если вам нужно найти фильмы в жанре комедия и мелодрама но не короткометражка то указывайте так: `"+комедия", "+мелодрама", "!короткометражка"`. <br> Если вы укажите `"комедия", "+мелодрама", "!короткометражка"`, то в выдачу попадут фильмы которые относятся к жанру комедия даже если они не мелодрама и короткометражка! */
        "genres.name"?: string[] | null;
        /** @description Поиск по странам (пример: `"США", "Россия", "!Франция" , "+Великобритания"`) */
        "countries.name"?: string[] | null;
        /** @description Поиск по наличию билетов в продаже (пример: `true, false`) */
        ticketsOnSale?: string[] | null;
        /** @description Поиск по сетям производства фильма (пример: `"HBO", "Netflix", "!Amazon"`) */
        "networks.items.name"?: string[] | null;
        /** @description Поиск по ID персон (пример: `666, 555, !666`) */
        "persons.id"?: string[] | null;
        /** @description Поиск по профессиям персон (пример: `"актер", "режиссер", "!сценарист"`) */
        "persons.profession"?: string[] | null;
        /** @description Поиск по английским профессиям персон (пример: `"actor", "director", "!writer"`) */
        "persons.enProfession"?: string[] | null;
        /** @description Поиск по сборам в мире (пример: `1000-6666666`) */
        "fees.world"?: string[] | null;
        /** @description Поиск по сборам в США (пример: `1000-6666666`) */
        "fees.usa"?: string[] | null;
        /** @description Поиск по сборам в России (пример: `1000-6666666`) */
        "fees.russia"?: string[] | null;
        /** @description Поиск по дате премьеры в мире (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.world"?: string[] | null;
        /** @description Поиск по дате премьеры в США (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.usa"?: string[] | null;
        /** @description Поиск по дате премьеры в России (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.russia"?: string[] | null;
        /** @description Поиск по дате премьеры в стриминговых сервисах (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.digital"?: string[] | null;
        /** @description Поиск по дате премьеры в кинотеатрах (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.cinema"?: string[] | null;
        /** @description Поиск по стране премьеры (пример: `"США", "Россия", "!Франция" , "+Великобритания"`) */
        "premiere.country"?: string[] | null;
        /** @description Поиск по ID KinoPoisk из списка похожих фильмов (пример: `666, 555, !666`) */
        "similarMovies.id"?: string[] | null;
        /** @description Поиск по ID KinoPoisk из списка сиквелов и преквелов (пример: `666, 555, !666`) */
        "sequelsAndPrequels.id"?: string[] | null;
        /** @description Поиск по доуступным платформам для просмотра (пример: `"ivi", "okko", "!megogo"`) */
        "watchability.items.name"?: string[] | null;
        /** @description Поиск по коллекциям из KinoPoisk (пример: `"top-250", "top-100-indian-movies", "!top-100-movies"`) */
        lists?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieDocsResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Поиск фильмов по названию
   * @description Этот метод вернет список фильмов которые подходят под ваш запрос.
   */
  MovieController_searchMovieV1_4: {
    parameters: {
      query: {
        /** @description Страница выборки */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Поисковый запрос */
        query: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SearchMovieResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Получить рандомный тайтл из базы
   * @description Этот метод вернет рандомный тайтл из базы. Вы можете составить фильтр, чтобы получить рандомный тайтл по вашим критериям.
   */
  MovieController_getRandomMovieV1_4: {
    parameters: {
      query?: {
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("id" | "externalId.imdb" | "externalId.tmdb" | "externalId.kpHD" | "name" | "enName" | "alternativeName" | "names.name" | "description" | "shortDescription" | "slogan" | "type" | "typeNumber" | "isSeries" | "status" | "year" | "releaseYears.start" | "releaseYears.end" | "rating.kp" | "rating.imdb" | "rating.tmdb" | "rating.filmCritics" | "rating.russianFilmCritics" | "rating.await" | "ratingMpaa" | "ageRating" | "votes.kp" | "votes.imdb" | "votes.tmdb" | "votes.filmCritics" | "votes.russianFilmCritics" | "votes.await" | "budget.value" | "budget.currency" | "audience.count" | "audience.country" | "movieLength" | "seriesLength" | "totalSeriesLength" | "genres.name" | "countries.name" | "poster.url" | "backdrop.url" | "logo.url" | "ticketsOnSale" | "videos.trailers.url" | "videos.trailers.site" | "videos.trailers.name" | "networks.items.name" | "networks.items.logo.url" | "persons.id" | "persons.name" | "persons.enName" | "persons.photo" | "persons.description" | "persons.profession" | "persons.enProfession" | "facts.type" | "facts.value" | "facts.spoiler" | "fees.world" | "fees.usa" | "fees.russia" | "premiere.world" | "premiere.usa" | "premiere.russia" | "premiere.digital" | "premiere.dvd" | "premiere.bluRay" | "premiere.cinema" | "premiere.country" | "similarMovies.id" | "similarMovies.name" | "similarMovies.enName" | "similarMovies.alternativeName" | "similarMovies.poster.url" | "sequelsAndPrequels.id" | "sequelsAndPrequels.name" | "sequelsAndPrequels.enName" | "sequelsAndPrequels.alternativeName" | "sequelsAndPrequels.poster.url" | "watchability.items.name" | "watchability.items.url" | "watchability.items.logo.url" | "lists" | "top10" | "top250")[];
        /** @description Поиск по ID KinoPoisk (пример: `"666", "555", "!666"`) */
        id?: string[] | null;
        /** @description Поиск по IMDB ID (пример: `"tt666", "tt555", "!tt666"`) */
        "externalId.imdb"?: string[] | null;
        /** @description Поиск по TMDB ID (пример: `666, 555, !666`) */
        "externalId.tmdb"?: number[] | null;
        /** @description Поиск по id KinoPoisk HD (пример: `"48e8d0acb0f62d8585101798eaeceec5", "!48e8d0acb0f62d8585101798eaeceec5"`) */
        "externalId.kpHD"?: string[] | null;
        /** @description Поиск по типу фильма (пример: `"movie", "tv-series", "!anime"`) */
        type?: (("movie" | "tv-series" | "cartoon" | "animated-series" | "anime")[]) | null;
        /** @description Поиск по номеру типа фильма (пример: `1, 2, !3`). Список типов: 1 (movie), 2 (tv-series), 3 (cartoon), 4 (anime), 5 (animated-series). */
        typeNumber?: string[] | null;
        /** @description Поиск по индикатору сериала (пример: `true, false`) */
        isSeries?: string[] | null;
        /** @description Поиск по статусу фильма (пример: `"announced", "completed", "!filming"`) */
        status?: (("announced" | "completed" | "filming" | "post-production" | "pre-production")[]) | null;
        /** @description Поиск по году (пример: `1874, 2050, !2020, 2020-2024`) */
        year?: string[] | null;
        /** @description Поиск по года начала релиза (пример: `1874, 2050, !2020, 2020-2024`) */
        "releaseYears.start"?: string[] | null;
        /** @description Поиск по года окончания релиза (пример: `1874, 2050, !2020, 2020-2024`) */
        "releaseYears.end"?: string[] | null;
        /** @description Поиск по рейтингу Кинопоиск (пример: `7, 10, 7.2-10`) */
        "rating.kp"?: string[] | null;
        /** @description Поиск по рейтингу IMDB (пример: `7, 10, 7.2-10`) */
        "rating.imdb"?: string[] | null;
        /** @description Поиск по рейтингу TMDB (пример: `7, 10, 7.2-10`) */
        "rating.tmdb"?: string[] | null;
        /** @description Поиск по рейтингу MPAA (пример: `"G", "NC-17", "!R"`) */
        ratingMpaa?: string[] | null;
        /** @description Поиск по возрастному рейтингу (пример: `12, !18, 12-18`) */
        ageRating?: string[] | null;
        /** @description Поиск по количеству голосов на KP (пример: `1000-6666666`) */
        "votes.kp"?: string[] | null;
        /** @description Поиск по количеству голосов на IMDB (пример: `1000-6666666`) */
        "votes.imdb"?: string[] | null;
        /** @description Поиск по количеству голосов на TMDB (пример: `1000-6666666`) */
        "votes.tmdb"?: string[] | null;
        /** @description Поиск по количеству голосов кинокритиков (пример: `1000-6666666`) */
        "votes.filmCritics"?: string[] | null;
        /** @description Поиск по количеству голосов кинокритиков из России (пример: `1000-6666666`) */
        "votes.russianFilmCritics"?: string[] | null;
        /** @description Поиск по количеству голосов ожидания на Кинопоиске (пример: `1000-6666666`) */
        "votes.await"?: string[] | null;
        /** @description Поиск по бюджету фильма (пример: `1000-6666666`) */
        "budget.value"?: string[] | null;
        /** @description Поиск по количеству аудитории (пример: `1000-6666666`) */
        "audience.count"?: string[] | null;
        /** @description Поиск по продолжительности фильма (пример: `100-120`) */
        movieLength?: string[] | null;
        /** @description Поиск по всей продолжительности одной серии (пример: `20-60`) */
        seriesLength?: string[] | null;
        /** @description Поиск по всей продолжительности сериала (пример: `100-120`) */
        totalSeriesLength?: string[] | null;
        /** @description Поиск по жанрам (пример: `"драма", "комедия", "!мелодрама", "+ужасы"`) */
        "genres.name"?: string[] | null;
        /** @description Поиск по странам (пример: `"США", "Россия", "!Франция" , "+Великобритания"`) */
        "countries.name"?: string[] | null;
        /** @description Поиск по наличию билетов в продаже (пример: `true, false`) */
        ticketsOnSale?: string[] | null;
        /** @description Поиск по сетям производства фильма (пример: `"HBO", "Netflix", "!Amazon"`) */
        "networks.items.name"?: string[] | null;
        /** @description Поиск по ID персон (пример: `666, 555, !666`) */
        "persons.id"?: string[] | null;
        /** @description Поиск по профессиям персон (пример: `"актер", "режиссер", "!сценарист"`) */
        "persons.profession"?: string[] | null;
        /** @description Поиск по английским профессиям персон (пример: `"actor", "director", "!writer"`) */
        "persons.enProfession"?: string[] | null;
        /** @description Поиск по сборам в мире (пример: `1000-6666666`) */
        "fees.world"?: string[] | null;
        /** @description Поиск по сборам в США (пример: `1000-6666666`) */
        "fees.usa"?: string[] | null;
        /** @description Поиск по сборам в России (пример: `1000-6666666`) */
        "fees.russia"?: string[] | null;
        /** @description Поиск по дате премьеры в мире (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.world"?: string[] | null;
        /** @description Поиск по дате премьеры в США (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.usa"?: string[] | null;
        /** @description Поиск по дате премьеры в России (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.russia"?: string[] | null;
        /** @description Поиск по дате премьеры в стриминговых сервисах (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.digital"?: string[] | null;
        /** @description Поиск по дате премьеры в кинотеатрах (пример: `01.01.2020, 01.01.2020-31.12.2020`) */
        "premiere.cinema"?: string[] | null;
        /** @description Поиск по стране премьеры (пример: `"США", "Россия", "!Франция" , "+Великобритания"`) */
        "premiere.country"?: string[] | null;
        /** @description Поиск по ID KinoPoisk из списка похожих фильмов (пример: `666, 555, !666`) */
        "similarMovies.id"?: string[] | null;
        /** @description Поиск по ID KinoPoisk из списка сиквелов и преквелов (пример: `666, 555, !666`) */
        "sequelsAndPrequels.id"?: string[] | null;
        /** @description Поиск по доуступным платформам для просмотра (пример: `"ivi", "okko", "!megogo"`) */
        "watchability.items.name"?: string[] | null;
        /** @description Поиск по коллекциям из KinoPoisk (пример: `"top-250", "top-100-indian-movies", "!top-100-movies"`) */
        lists?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieDtoV1_4"];
        };
      };
    };
  };
  /** Награды тайтлов */
  MovieController_findManyAwardsV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("movieId" | "winning" | "nomination")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("movieId" | "winning" | "nomination.award.title" | "nomination.award.year" | "nomination.title")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("movieId" | "winning" | "nomination.award.title" | "nomination.award.year" | "nomination.title")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск по ID фильма (пример: `"666", "555", "!666"`) */
        movieId?: string[] | null;
        /** @description Поиск по номинациям (пример: `"Оскар", "Золотой глобус"`) */
        "nomination.title"?: string[] | null;
        /** @description Поиск по наградам (пример: `"Лучший фильм", "Лучший актер"`) */
        "nomination.award.title"?: string[] | null;
        /** @description Поиск по году награды (пример: `"2019", "2020"`) */
        "nomination.award.year"?: string[] | null;
        /** @description Поиск по победам (пример: `"true", "false"`) */
        winning?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MovieAwardDocsResponseDto"];
        };
      };
    };
  };
  /**
   * Получить список стран, жанров, и т.д.
   * @description Этот метод принимает только определенные поля, и возвращает по ним все доступные значения.
   */
  MovieController_getPossibleValuesByFieldName: {
    parameters: {
      query: {
        field: "genres.name" | "countries.name" | "type" | "typeNumber" | "status";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PossibleValueDto"][];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["PossibleValueDto"][];
        };
      };
    };
  };
  /** Поиск сезонов */
  SeasonController_findManyV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("movieId" | "poster" | "number" | "name" | "enName" | "episodesCount" | "airDate" | "episodes")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("movieId" | "poster.url" | "poster.previewUrl" | "number" | "name" | "enName" | "episodesCount" | "airDate" | "episodes.number" | "episodes.name" | "episodes.enName" | "episodes.airDate" | "episodes.date" | "episodes.description" | "episodes.enDescription")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("movieId" | "poster.url" | "poster.previewUrl" | "number" | "name" | "enName" | "episodesCount" | "airDate" | "episodes.number" | "episodes.name" | "episodes.enName" | "episodes.airDate" | "episodes.date" | "episodes.description" | "episodes.enDescription")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск по ID фильма (пример: `"666", "555", "!666"`) */
        moviesId?: string[] | null;
        /** @description Поиск по номеру сезона (пример: `"1", "1-19", "!3"`) */
        number?: string[] | null;
        /** @description Поиск по нормеру эпизода (пример: `"1", "1-19", "!3"`) */
        "episodes.number"?: string[] | null;
        /** @description Поиск по дате выхода сезона (пример: `"2020-01-01-2020-12-31", "2020-01-01"`) */
        airDate?: string[] | null;
        /** @description Поиск по дате выхода эпизода (пример: `"2020-01-01-2020-12-31", "2020-01-01"`) */
        "episodes.airDate"?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SeasonDocsResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Универсальный поиск с фильтрами
   * @description Этот метод предназначен для поиска персон по фильтрам. Он принимает множество параметров, которые можно комбинировать между собой. Если вам нужен только поиск по имени, используйте метод `Полнотекстовый поиск` (search). В этом методе также доступен выбор полей. А в ответ приходит полная модель персоны.
   */
  ReviewController_findManyV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("id" | "movieId" | "title" | "type" | "review" | "date" | "author" | "authorId")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("id" | "movieId" | "title" | "type" | "review" | "date" | "author" | "authorId")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("id" | "movieId" | "title" | "type" | "review" | "date" | "author" | "authorId")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск по ID отзыва (пример: `"111", "222", "!666"`) */
        id?: string[] | null;
        /** @description Поиск по ID фильма (пример: `"666", "555", "!666"`) */
        "movies.id"?: string[] | null;
        /** @description Поиск отзывов по ID автора (пример: `"666", "555", "!666"`) */
        authorId?: string[] | null;
        /** @description Поиск по имени автора отзыва (пример: `"КиноПоиск", "!КиноПоиск"`) */
        author?: string[] | null;
        /** @description Поиск по типу отзыва (пример: `"!Негативный", "Нейтральный", "Позитивный"`) */
        type?: (("Негативный" | "Нейтральный" | "Позитивный")[]) | null;
        /** @description Поиск по дате создания отзыва (пример: `"01.01.2021-01.01.2022", "01.01.2021"`) */
        date?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReviewDocsResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Поиск по id
   * @description Возвращает всю доступную информацию о сущности.
   */
  PersonController_findOneV1_4: {
    parameters: {
      path: {
        /** @description ID из кинопоиска */
        id: number | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
        };
      };
      /** @description Other */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"];
        };
      };
    };
  };
  /**
   * Универсальный поиск с фильтрами
   * @description Этот метод вернет список персон удовлетворяющих вашему запросу. <br> В ответе придут поля указанные в параметре `selectFields`. Если его не указать, то вернутся только дефолтные поля.
   */
  PersonController_findManyV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("id" | "name" | "enName" | "photo" | "sex" | "growth" | "birthday" | "death" | "age" | "birthPlace" | "deathPlace" | "spouses" | "countAwards" | "profession" | "facts" | "movies")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("id" | "name" | "enName" | "photo" | "sex" | "growth" | "birthday" | "death" | "age" | "birthPlace.value" | "deathPlace.value" | "spouses.id" | "spouses.name" | "spouses.divorced" | "spouses.divorcedReason" | "spouses.sex" | "spouses.children" | "spouses.relation" | "countAwards" | "profession.value" | "facts.value" | "movies.id" | "movies.name" | "movies.alternativeName" | "movies.rating" | "movies.general" | "movies.description" | "movies.enProfession")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("id" | "name" | "enName" | "photo" | "sex" | "growth" | "birthday" | "death" | "age" | "birthPlace.value" | "deathPlace.value" | "spouses.id" | "spouses.name" | "spouses.divorced" | "spouses.divorcedReason" | "spouses.sex" | "spouses.children" | "spouses.relation" | "countAwards" | "profession.value" | "facts.value" | "movies.id" | "movies.name" | "movies.alternativeName" | "movies.rating" | "movies.general" | "movies.description" | "movies.enProfession")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск по ID KinoPoisk (пример: `"111", "222", "!666"`) */
        id?: string[] | null;
        /** @description Поиск по ID фильма (пример: `"666", "555", "!666"`) */
        "movies.id"?: string[] | null;
        /** @description Поиск по гендеру (пример: `Женский, Мужской`) */
        sex?: (("Женский" | "Мужской")[]) | null;
        /** @description Поиск по росту (пример: `170-180, 180`) */
        growth?: string[] | null;
        /** @description Поиск по дате рождения (пример: `01.01.2000-01.01.2001, 01.01.2000`) */
        birthday?: string[] | null;
        /** @description Поиск по дате смерти (пример: `01.01.2000-01.01.2001, 01.01.2000`) */
        death?: string[] | null;
        /** @description Поиск по возрасту (пример: `18-25, 25`) */
        age?: string[] | null;
        /** @description Поиск по месту рождения (пример: `Москва, Санкт-Петербург`) */
        "birthPlace.value"?: string[] | null;
        /** @description Поиск по месту смерти (пример: `Москва, Санкт-Петербург`) */
        "deathPlace.value"?: string[] | null;
        /** @description Поиск по ID супруги(супруга) (пример: `111, 222`) */
        "spouses.id"?: string[] | null;
        /** @description Поиск по статусу развода (пример: `true, false`) */
        "spouses.divorced"?: boolean | null;
        /** @description Поиск по гендеру супруги(супруга) (пример: `Женский, Мужской`) */
        "spouses.sex"?: (("Женский" | "Мужской")[]) | null;
        /** @description Поиск по количеству наград (пример: `1-10, 10`) */
        countAwards?: string[] | null;
        /** @description Поиск по профессии (пример: `Актер, Режиссер`) */
        "profession.value"?: (("Актер" | "Актер дубляжа" | "Актриса" | "Актриса дубляжа" | "В титрах не указаны" | "Группа: Хроника" | "Группа: играют самих себя" | "Директор фильма" | "Звукорежиссер" | "Композитор" | "Монтажер" | "Озвучка" | "Оператор" | "Переводчик" | "Продюсер" | "Режиссер" | "Режиссер дубляжа" | "Сценарист" | "Художник")[]) | null;
        /** @description Поиск по рейтингу фильма (пример: `1-10, 10`) */
        "movies.rating"?: string[] | null;
        /** @description Поиск по профессии в фильмах на английском (пример: `actor, director`) */
        "movies.enProfession"?: (("actor" | "cameo" | "composer" | "design" | "director" | "director_ussr" | "editor" | "group_cameo" | "group_uncredited" | "operator" | "producer" | "sound_designer" | "translator" | "uncredited" | "voice_director" | "voiceover" | "writer")[]) | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonDocsResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Поиск актеров, режиссеров, и т.д по имени
   * @description Этот метод вернет список персон которые подходят под ваш запрос.
   */
  PersonController_searchPersonV1_4: {
    parameters: {
      query: {
        /** @description Страница выборки */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Поисковый запрос */
        query: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SearchPersonResponseDtoV1_4"];
        };
      };
    };
  };
  /** Награды актеров */
  PersonController_findManyAwardsV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("personId" | "winning" | "nomination")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("personId" | "winning" | "nomination.award.title" | "nomination.award.year" | "nomination.title")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("personId" | "winning" | "nomination.award.title" | "nomination.award.year" | "nomination.title")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск по ID персоны (пример: `"666", "555", "!666"`) */
        personId?: string[] | null;
        /** @description Поиск по номинациям (пример: `"Оскар", "Золотой глобус"`) */
        "nomination.title"?: string[] | null;
        /** @description Поиск по наградам (пример: `"Лучший фильм", "Лучший актер"`) */
        "nomination.award.title"?: string[] | null;
        /** @description Поиск по году награды (пример: `"2019", "2020"`) */
        "nomination.award.year"?: string[] | null;
        /** @description Поиск по победам (пример: `"true", "false"`) */
        winning?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonAwardDocsResponseDto"];
        };
      };
    };
  };
  /**
   * Поиск студий
   * @description Этот метод предназначен для поиска студий
   */
  StudioController_findManyV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("id" | "subType" | "title" | "type" | "movies")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("id" | "subType" | "title" | "type" | "movies.id")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("id" | "subType" | "title" | "type" | "movies.id")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск по ID KinoPoisk (пример: `"warnerbros", "222", "!666"`) */
        id?: string[] | null;
        /** @description Поиск по ID фильма (пример: `"666", "555", "!666"`) */
        "movies.id"?: string[] | null;
        /** @description Поиск по типу студии (пример: `"Производство", "Студия дубляжа"`) */
        type?: string[] | null;
        /** @description Поиск по типу студии (пример: `"company", "studio"`) */
        subType?: string[] | null;
        /** @description Поиск по названию студии (пример: `"Warner Bros.", "!Warner Bros."`) */
        title?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudioDocsResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Поиск ключевых слов
   * @description Этот метод предназначен для поиска ключевых слов
   */
  KeywordController_findManyV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("id" | "movie" | "title")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("id" | "movie.id" | "title")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("id" | "movie.id" | "title")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск ключевого слова по id (пример: `"666", "!666"`) */
        id?: string[];
        /** @description Поиск ключевых слов по id фильма (пример: `"666", "!666"`) */
        "movie.id"?: string[];
        /** @description Поиск ключевых слов по наименованию (пример: `"1980-е", "!1980-е"`) */
        title?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["KeywordDocsResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Поиск картинок
   * @description Этот метод предназначен для поиска картинок которые привязаны к фильмам и сериалам
   */
  ImageController_findManyV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("movieId" | "type" | "language" | "url" | "previewUrl" | "height" | "width")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("movieId" | "type" | "language" | "url" | "previewUrl" | "height" | "width")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("movieId" | "type" | "language" | "url" | "previewUrl" | "height" | "width")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск картинок по id фильма (пример: `"666", "!666"`) */
        movieId?: string[];
        /** @description Поиск картинок по типу (пример: `"cover", "!cover"`) */
        type?: ("backdrops" | "cover" | "frame" | "promo" | "screenshot" | "shooting" | "still" | "wallpaper")[];
        /** @description Поиск картинок по языку (пример: `"en", "!de"`) */
        language?: ("ab" | "af" | "am" | "ar" | "as" | "av" | "ba" | "be" | "bg" | "bn" | "ca" | "ce" | "cn" | "cs" | "cu" | "cv" | "da" | "de")[];
        /** @description Поиск картинок по высоте (пример: `"1920", "360-1920"`) */
        height?: string[];
        /** @description Поиск картинок по ширине (пример: `"1080", "320-1080"`) */
        width?: string[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ImageDocsResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Поиск коллекций
   * @description Этот метод предназначен для поиска коллекций кино
   */
  ListController_findManyV1_4: {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        limit?: number;
        /** @description Список полей требуемых в ответе из модели */
        selectFields?: ("category" | "slug" | "moviesCount" | "cover")[];
        /** @description Список полей которые не должны быть null или пусты */
        notNullFields?: ("category" | "slug" | "moviesCount" | "cover.url" | "cover.previewUrl")[];
        /** @description Сортировка по полям из модели */
        sortField?: ("category" | "slug" | "moviesCount" | "cover.url" | "cover.previewUrl")[];
        /** @description Тип сортировки применительно к полям из sortField (пример: `"1", "-1"`) */
        sortType?: string[];
        /** @description Поиск slug (пример: `"!top-250", "top-250"`) */
        slug?: string[] | null;
        /** @description Поиск по категории (пример: `"Фильмы", "!Фильмы"`) */
        category?: (("Онлайн-кинотеатр" | "Премии" | "Сборы" | "Сериалы" | "Фильмы")[]) | null;
        /** @description Поиск по количеству фильмов (пример: `"1-200", "10"`) */
        moviesCount?: string[] | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ListDocsResponseDtoV1_4"];
        };
      };
    };
  };
  /**
   * Поиск коллекции по slug
   * @description Этот метод предназначен для поиска коллекции кино по slug
   */
  ListController_findOneV1_4: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List"];
        };
      };
    };
  };
}
