import axios, { AxiosResponse } from 'axios';
import { paths } from './api-scheme'; // <- generated by openapi-typescript

type Paths = {
  [P in keyof paths]: P;
}[keyof paths]

type QueryKeys = {
  [P in Paths]: paths[P]['get'] extends { parameters: { query?: Record<string, unknown> } } ? P : never
}[Paths]

export type GetResponse<T extends Paths> = paths[T]['get']['responses'][200]['content']['application/json'];
export type GetQueryParams<T extends QueryKeys> = paths[T]['get']['parameters']['query']

export type Id = number | string;
export type Response<T extends GetResponse<Paths>> = Promise<AxiosResponse<T>>;

export const API_URL = `${import.meta.env.VITE_API_UNOFFICIAL_URL}/api`;

export const paramsSerializer = (params: Record<string, string[] | string>) => {
  let formattedParams: string = '';
  let isFirst = true;
  Object.keys(params).forEach(key => {
    if (params[key]) {
      if (Array.isArray(params[key])) {
        (params[key] as string[]).forEach(value => {
          formattedParams += `${isFirst ? '' : '&'}${key}=${value}`;
          isFirst = false;
        });
        return;
      }
      formattedParams += `${isFirst ? '' : '&'}${key}=${params[key]}`;
      isFirst = false;
    }
  });
  return formattedParams;
};

export const kinoUnoffAxios = axios.create({
  baseURL: API_URL,
  headers: {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    'X-Api-Key': 'fadfb749-8df9-412e-aa8e-85a55e038da5',
  },
});
